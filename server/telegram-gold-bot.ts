import { EventEmitter } from "events";

export interface TelegramBotConfig {
  botToken: string;
  chatId: string;
  updateInterval: number; // minutes
}

export interface GoldPriceMessage {
  vietnamGold: {
    sjc: { buy: number; sell: number; spread: number };
    pnj: { buy: number; sell: number; spread: number };
  };
  worldGold: {
    price: number;
    change24h: number;
    changePercent: number;
    bid: number;
    ask: number;
  };
  analysis: {
    arbitrageOpportunity: number;
    recommendation: string;
    riskLevel: string;
  };
  timestamp: string;
}

export class TelegramGoldBot extends EventEmitter {
  private config: TelegramBotConfig;
  private isRunning: boolean = false;
  private updateTimer: NodeJS.Timeout | null = null;

  constructor(config: TelegramBotConfig) {
    super();
    this.config = config;
  }

  async sendGoldPriceUpdate(): Promise<boolean> {
    try {
      console.log("üì± Chu·∫©n b·ªã g·ª≠i c·∫≠p nh·∫≠t gi√° v√†ng qua Telegram...");

      // Get Vietnam gold prices
      const { quickAttackSystem } = await import("./quick-attack-system.js");
      const vietnamGold = await quickAttackSystem.scanLiquidityTargets();

      // Get world gold price
      const { worldGoldScanner } = await import("./world-gold-scanner.js");
      const worldGold = await worldGoldScanner.scanWorldGoldPrice();

      if (!worldGold) {
        console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° v√†ng th·∫ø gi·ªõi");
        return false;
      }

      // Find SJC and PNJ data
      const sjcData = vietnamGold.find((item: any) => item.source === "SJC");
      const pnjData = vietnamGold.find((item: any) => item.source === "PNJ");

      if (!sjcData || !pnjData) {
        console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° v√†ng SJC/PNJ");
        return false;
      }

      // Calculate arbitrage opportunity
      const worldGoldVND = worldGold.price * 23500; // Approximate USD to VND rate
      const vietnamAvg = (sjcData.buyPrice + pnjData.buyPrice) / 2;
      const arbitrageOpportunity = Math.abs(worldGoldVND - vietnamAvg);

      // Create message
      const message: GoldPriceMessage = {
        vietnamGold: {
          sjc: {
            buy: sjcData.buyPrice,
            sell: sjcData.sellPrice,
            spread: sjcData.spread,
          },
          pnj: {
            buy: pnjData.buyPrice,
            sell: pnjData.sellPrice,
            spread: pnjData.spread,
          },
        },
        worldGold: {
          price: worldGold.price,
          change24h: worldGold.change24h,
          changePercent: worldGold.changePercent24h,
          bid: worldGold.bid,
          ask: worldGold.ask,
        },
        analysis: {
          arbitrageOpportunity,
          recommendation: this.generateRecommendation(
            arbitrageOpportunity,
            sjcData,
            worldGold,
          ),
          riskLevel:
            arbitrageOpportunity > 500000
              ? "CAO"
              : arbitrageOpportunity > 200000
                ? "TRUNG B√åNH"
                : "TH·∫§P",
        },
        timestamp: new Date().toLocaleString("vi-VN"),
      };

      // Format and send message
      const formattedMessage = this.formatGoldMessage(message);
      const success = await this.sendTelegramMessage(formattedMessage);

      if (success) {
        console.log("‚úÖ ƒê√£ g·ª≠i c·∫≠p nh·∫≠t gi√° v√†ng qua Telegram");
        this.emit("messageSent", message);
      }

      return success;
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i c·∫≠p nh·∫≠t Telegram:", error);
      return false;
    }
  }

  private formatGoldMessage(data: GoldPriceMessage): string {
    const { vietnamGold, worldGold, analysis } = data;

    return `üèÖ **B√ÅO GI√Å V√ÄNG TH·ªúI GIAN TH·ª∞C**
üìÖ ${data.timestamp}

**üáªüá≥ V√ÄNG VI·ªÜT NAM:**
‚îå SJC Gold
‚îú üí∞ Mua: ${vietnamGold.sjc.buy.toLocaleString()} VND
‚îú üí∞ B√°n: ${vietnamGold.sjc.sell.toLocaleString()} VND
‚îî üìä Spread: ${vietnamGold.sjc.spread.toLocaleString()} VND

‚îå PNJ Gold  
‚îú üí∞ Mua: ${vietnamGold.pnj.buy.toLocaleString()} VND
‚îú üí∞ B√°n: ${vietnamGold.pnj.sell.toLocaleString()} VND
‚îî üìä Spread: ${vietnamGold.pnj.spread.toLocaleString()} VND

**üåç V√ÄNG TH·∫æ GI·ªöI:**
‚îå Gi√° hi·ªán t·∫°i: $${worldGold.price}/oz
‚îú Thay ƒë·ªïi 24h: ${worldGold.change24h > 0 ? "+" : ""}${worldGold.change24h} (${worldGold.changePercent}%)
‚îú Bid/Ask: $${worldGold.bid.toFixed(2)}/$${worldGold.ask.toFixed(2)}
‚îî Thanh kho·∫£n: ${this.getLiquidityStatus(worldGold)}

**‚öîÔ∏è PH√ÇN T√çCH ARBITRAGE:**
‚îå Ch√™nh l·ªách: ${analysis.arbitrageOpportunity.toLocaleString()} VND
‚îú M·ª©c r·ªßi ro: ${analysis.riskLevel}
‚îî Khuy·∫øn ngh·ªã: ${analysis.recommendation}

**üéØ C√ÅC L·ªÜNH S·ª¨ D·ª§NG:**
/gold - Gi√° v√†ng hi·ªán t·∫°i
/analyze - Ph√¢n t√≠ch chi ti·∫øt
/attack - Kh·ªüi ch·∫°y t·∫•n c√¥ng SJC
/world - T·∫•n c√¥ng v√†ng th·∫ø gi·ªõi
/monitor - B·∫≠t/t·∫Øt gi√°m s√°t

*ƒê∆∞·ª£c t·∫°o b·ªüi H·ªá th·ªëng T·∫•n c√¥ng Thanh kho·∫£n ODANA*`;
  }

  private generateRecommendation(
    arbitrage: number,
    sjcData: any,
    worldGold: any,
  ): string {
    if (arbitrage > 500000) {
      return "üö® C∆† H·ªòI ARBITRAGE CAO - T·∫§N C√îNG NGAY";
    } else if (arbitrage > 200000) {
      return "‚ö†Ô∏è C∆° h·ªôi v·ª´a ph·∫£i - Theo d√µi th√™m";
    } else if (sjcData.liquidityLevel === "low") {
      return "üéØ SJC thanh kho·∫£n th·∫•p - T·∫•n c√¥ng √°p l·ª±c";
    } else if (Math.abs(worldGold.changePercent24h) > 2) {
      return "üìä Bi·∫øn ƒë·ªông cao - C·∫©n tr·ªçng giao d·ªãch";
    } else {
      return "üòå Th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh - Ch·ªù c∆° h·ªôi";
    }
  }

  private getLiquidityStatus(worldGold: any): string {
    const spread = ((worldGold.ask - worldGold.bid) / worldGold.price) * 100;
    if (spread < 0.1) return "CAO üü¢";
    if (spread < 0.3) return "TRUNG B√åNH üü°";
    return "TH·∫§P üî¥";
  }

  private async sendTelegramMessage(message: string): Promise<boolean> {
    try {
      const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
      const payload = {
        chat_id: this.config.chatId,
        text: message,
        parse_mode: "Markdown",
        disable_web_page_preview: true,
      };

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        console.log("‚úÖ Tin nh·∫Øn Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng");
        return true;
      } else {
        const errorData = await response.json();
        console.error("‚ùå L·ªói g·ª≠i Telegram:", errorData);
        return false;
      }
    } catch (error) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi Telegram API:", error);
      return false;
    }
  }

  async handleTelegramCommand(command: string, chatId: string): Promise<void> {
    try {
      let response = "";

      switch (command.toLowerCase()) {
        case "/gold":
        case "/start":
          await this.sendGoldPriceUpdate();
          return;

        case "/analyze":
          response = await this.getDetailedAnalysis();
          break;

        case "/attack":
          response = await this.executeSJCAttack();
          break;

        case "/world":
          response = await this.executeWorldGoldAttack();
          break;

        case "/monitor":
          response = this.toggleMonitoring();
          break;

        case "/help":
          response = this.getHelpMessage();
          break;

        default:
          response = "‚ùì L·ªánh kh√¥ng h·ª£p l·ªá. G·ª≠i /help ƒë·ªÉ xem danh s√°ch l·ªánh.";
      }

      if (response) {
        await this.sendTelegramMessage(response);
      }
    } catch (error) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω l·ªánh Telegram:", error);
      await this.sendTelegramMessage(
        "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh c·ªßa b·∫°n.",
      );
    }
  }

  private async getDetailedAnalysis(): Promise<string> {
    try {
      const { worldGoldScanner } = await import("./world-gold-scanner.js");
      const goldData = await worldGoldScanner.scanWorldGoldPrice();

      if (goldData) {
        const analysis = worldGoldScanner.analyzeLiquidityOpportunity(goldData);

        return `üìä **PH√ÇN T√çCH CHI TI·∫æT**

**ƒêi·ªÉm c∆° h·ªôi:** ${analysis.opportunityScore}/100
**M·ª©c r·ªßi ro:** ${analysis.riskLevel}
**Vector khuy·∫øn ngh·ªã:** ${analysis.recommendedVector}
**L·ª£i nhu·∫≠n ∆∞·ªõc t√≠nh:** $${analysis.estimatedProfit}
**ƒê·ªô tin c·∫≠y:** ${analysis.confidence.toFixed(1)}%

${analysis.opportunityScore > 60 ? "üö® **KHUY·∫æN NGH·ªä TH·ª∞C HI·ªÜN T·∫§N C√îNG!**" : "‚è≥ Ch·ªù c∆° h·ªôi t·ªët h∆°n"}`;
      }

      return "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ph√¢n t√≠ch";
    } catch (error) {
      return "‚ùå L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu";
    }
  }

  private async executeSJCAttack(): Promise<string> {
    try {
      const { quickAttackSystem } = await import("./quick-attack-system.js");
      const result = await quickAttackSystem.executeSJCPressureAttack("HIGH");

      return `‚öîÔ∏è **T·∫§N C√îNG SJC HO√ÄN TH√ÄNH**

**ID T·∫•n c√¥ng:** ${result.attackId}
**M·ª•c ti√™u:** ${result.target}
**C∆∞·ªùng ƒë·ªô:** ${result.intensity}
**Thi·ªát h·∫°i g√¢y ra:**
‚îú Gi·∫£m spread: ${result.damage.spreadReduction.toFixed(0)} VND
‚îú R√∫t thanh kho·∫£n: ${result.damage.liquidityImpact.toFixed(1)}%
‚îî √Åp l·ª±c th·ªã tr∆∞·ªùng: ${result.damage.marketPressure.toFixed(1)}%

**K·∫øt qu·∫£:** ${result.status}
**Khuy·∫øn ngh·ªã:** ${result.recommendation}`;
    } catch (error) {
      return "‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán t·∫•n c√¥ng SJC";
    }
  }

  private async executeWorldGoldAttack(): Promise<string> {
    try {
      const { worldGoldScanner } = await import("./world-gold-scanner.js");
      const result =
        await worldGoldScanner.executeLiquidityAttack("SPOT_PRESSURE");

      return `üåç **T·∫§N C√îNG V√ÄNG TH·∫æ GI·ªöI HO√ÄN TH√ÄNH**

**ID T·∫•n c√¥ng:** ${result.attackId}
**Vector:** ${result.vectorUsed}
**Gi√° m·ª•c ti√™u:** $${result.targetPrice}
**Gi√° ƒë·∫°t ƒë∆∞·ª£c:** $${result.achievedPrice.toFixed(2)}
**L·ª£i nhu·∫≠n:** $${result.profitUSD.toFixed(2)}
**Thanh kho·∫£n r√∫t:** ${result.liquidityDrained.toFixed(1)}%
**T√°c ƒë·ªông th·ªã tr∆∞·ªùng:** ${result.marketImpact.toFixed(2)}%

**Tr·∫°ng th√°i:** ${result.status}`;
    } catch (error) {
      return "‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán t·∫•n c√¥ng v√†ng th·∫ø gi·ªõi";
    }
  }

  private toggleMonitoring(): string {
    if (this.isRunning) {
      this.stopAutoUpdates();
      return "‚èπÔ∏è **ƒê√É D·ª™NG GI√ÅM S√ÅT T·ª∞ ƒê·ªòNG**\n\nS·ª≠ d·ª•ng /monitor ƒë·ªÉ b·∫≠t l·∫°i.";
    } else {
      this.startAutoUpdates();
      return `üîÑ **ƒê√É B·∫¨T GI√ÅM S√ÅT T·ª∞ ƒê·ªòNG**\n\nC·∫≠p nh·∫≠t m·ªói ${this.config.updateInterval} ph√∫t.\nS·ª≠ d·ª•ng /monitor ƒë·ªÉ t·∫Øt.`;
    }
  }

  private getHelpMessage(): string {
    return `ü§ñ **TR·ª¢ GI√öP BOT V√ÄNG ODANA**

**L·ªánh c∆° b·∫£n:**
/gold - Xem gi√° v√†ng hi·ªán t·∫°i
/analyze - Ph√¢n t√≠ch chi ti·∫øt th·ªã tr∆∞·ªùng
/monitor - B·∫≠t/t·∫Øt gi√°m s√°t t·ª± ƒë·ªông

**L·ªánh t·∫•n c√¥ng:**
/attack - T·∫•n c√¥ng √°p l·ª±c SJC
/world - T·∫•n c√¥ng thanh kho·∫£n v√†ng th·∫ø gi·ªõi

**Th√¥ng tin:**
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y

*Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi H·ªá th·ªëng ODANA*
*C·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói ${this.config.updateInterval} ph√∫t*`;
  }

  startAutoUpdates(): void {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è Auto-updates ƒë√£ ƒëang ch·∫°y");
      return;
    }

    console.log(
      `üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói ${this.config.updateInterval} ph√∫t`,
    );
    this.isRunning = true;

    // Send initial update
    this.sendGoldPriceUpdate();

    // Set up recurring updates
    this.updateTimer = setInterval(
      () => {
        this.sendGoldPriceUpdate();
      },
      this.config.updateInterval * 60 * 1000,
    );

    this.emit("autoUpdatesStarted");
  }

  stopAutoUpdates(): void {
    if (this.updateTimer) {
      clearInterval(this.updateTimer);
      this.updateTimer = null;
    }
    this.isRunning = false;
    console.log("‚èπÔ∏è ƒê√£ d·ª´ng c·∫≠p nh·∫≠t t·ª± ƒë·ªông");
    this.emit("autoUpdatesStopped");
  }

  isAutoUpdating(): boolean {
    return this.isRunning;
  }

  updateConfig(newConfig: Partial<TelegramBotConfig>): void {
    this.config = { ...this.config, ...newConfig };

    if (this.isRunning) {
      this.stopAutoUpdates();
      this.startAutoUpdates();
    }
  }
}

// Export singleton instance
export const telegramGoldBot = new TelegramGoldBot({
  botToken: process.env.TELEGRAM_BOT_TOKEN || "",
  chatId: process.env.TELEGRAM_CHAT_ID || "",
  updateInterval: 30, // 30 minutes
});
