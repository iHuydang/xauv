
import express from 'express';
import { sjcIndirectPressureSystem } from './sjc-indirect-pressure-system';

const router = express.Router();

// Endpoint ch√≠nh ƒë·ªÉ th·ª±c hi·ªán t·∫•n c√¥ng √°p l·ª±c gi√°n ti·∫øp
router.post('/sjc/indirect-pressure', async (req, res) => {
  try {
    const { intensity = 'HIGH' } = req.body;
    
    console.log(`üö® API: Nh·∫≠n y√™u c·∫ßu t·∫•n c√¥ng √°p l·ª±c SJC gi√°n ti·∫øp`);
    
    const pressureId = await sjcIndirectPressureSystem.executeIndirectPressure(intensity);
    
    res.json({
      success: true,
      data: {
        pressure_id: pressureId,
        intensity,
        message: 'T·∫•n c√¥ng √°p l·ª±c gi√°n ti·∫øp SJC ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông',
        target: 'Bu·ªôc SJC gi·∫£m ch√™nh l·ªách v·ªõi gi√° v√†ng th·∫ø gi·ªõi',
        methods: [
          'Khai th√°c arbitrage',
          'T·∫•n c√¥ng h·ªá th·ªëng ƒë·ªãnh gi√°',
          'T·∫°o √°p l·ª±c t√†i ch√≠nh',
          'Escalation ph·ªëi h·ª£p'
        ]
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói th·ª±c hi·ªán t·∫•n c√¥ng √°p l·ª±c SJC',
      message: error.message
    });
  }
});

// L·∫•y tr·∫°ng th√°i c√°c cu·ªôc t·∫•n c√¥ng ƒëang ho·∫°t ƒë·ªông
router.get('/sjc/active-pressures', async (req, res) => {
  try {
    const activePressures = sjcIndirectPressureSystem.getActivePressures();
    
    res.json({
      success: true,
      data: {
        active_count: activePressures.length,
        pressures: activePressures.map(p => ({
          pressure_id: p.pressureId,
          status: p.status,
          duration: Date.now() - p.startTime.getTime(),
          financial_impact: p.financialImpact.estimatedLoss,
          sjc_response: p.sjcResponse
        }))
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói l·∫•y tr·∫°ng th√°i t·∫•n c√¥ng'
    });
  }
});

// L·∫•y tr·∫°ng th√°i h·ªá th·ªëng
router.get('/sjc/system-status', async (req, res) => {
  try {
    const status = await sjcIndirectPressureSystem.getSystemStatus();
    
    res.json({
      success: true,
      data: status
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói l·∫•y tr·∫°ng th√°i h·ªá th·ªëng'
    });
  }
});

// Quick attack v·ªõi tham s·ªë t√πy ch·ªânh
router.post('/sjc/quick-pressure', async (req, res) => {
  try {
    const { 
      intensity = 'HIGH',
      target_gap_percent = 2.0,
      duration_minutes = 10
    } = req.body;
    
    console.log(`‚ö° Quick Pressure Attack: ${intensity} trong ${duration_minutes} ph√∫t`);
    
    const pressureId = await sjcIndirectPressureSystem.executeIndirectPressure(intensity);
    
    res.json({
      success: true,
      data: {
        pressure_id: pressureId,
        target: `Gi·∫£m ch√™nh l·ªách SJC xu·ªëng d∆∞·ªõi ${target_gap_percent}%`,
        estimated_duration: `${duration_minutes} ph√∫t`,
        attack_type: 'Quick Indirect Pressure'
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói quick pressure attack'
    });
  }
});

export default router;
