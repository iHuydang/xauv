import axios from 'axios';
import { EventEmitter } from 'events';
import { vietnamGoldTradingIntegration } from './vietnam-gold-trading-integration';

export interface SJCSellingNews {
  sellerId: string;
  accountType: 'individual' | 'business' | 'institution';
  goldWeight: number; // gram
  goldTael: number; // l∆∞·ª£ng
  sellPrice: number; // VND per tael
  totalValue: number; // Total VND
  location: string;
  timestamp: number;
  marketImpact: 'low' | 'medium' | 'high';
  disguisedInfo: {
    sellerName: string;
    reason: string;
    urgency: 'normal' | 'urgent' | 'emergency';
  };
}

export class SJCNewsPropagationSystem extends EventEmitter {
  private newsSites: string[] = [
    'https://goonus.io/gia-vang/sjc',
    'https://cafef.vn/gia-vang.chn',
    'https://vneconomy.vn/gia-vang.htm',
    'https://dantri.com.vn/kinh-doanh/gia-vang.htm',
    'https://thanhnien.vn/kinh-te/gia-vang/',
    'https://tuoitre.vn/kinh-te/gia-vang.htm'
  ];

  private fakeSellerNames: string[] = [
    'Nguy·ªÖn VƒÉn Minh',
    'Tr·∫ßn Th·ªã Hoa',
    'L√™ Quang D≈©ng',
    'Ph·∫°m Th·ªã Mai',
    'Ho√†ng VƒÉn Nam',
    'V√µ Th·ªã Lan',
    'ƒê·∫∑ng Minh Tu·∫•n',
    'B√πi Th·ªã Nga'
  ];

  private sellReasons: string[] = [
    'Thanh l√Ω t√†i s·∫£n ƒë·ªÉ ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n',
    'C·∫ßn ti·ªÅn g·∫•p cho vi·ªác kinh doanh',
    'ƒêa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞',
    'Ch·ªët l·ªùi sau khi v√†ng tƒÉng cao',
    'C·∫ßn thanh kho·∫£n cho d·ª± √°n m·ªõi',
    'Tr√°nh r·ªßi ro khi th·ªã tr∆∞·ªùng b·∫•t ·ªïn',
    'Chuy·ªÉn sang ƒë·∫ßu t∆∞ c·ªï phi·∫øu',
    'Chu·∫©n b·ªã chi ph√≠ cho con du h·ªçc'
  ];

  private locations: string[] = [
    'Qu·∫≠n 1, TP.HCM',
    'Qu·∫≠n 3, TP.HCM', 
    'Qu·∫≠n Ho√†n Ki·∫øm, H√† N·ªôi',
    'Qu·∫≠n Ba ƒê√¨nh, H√† N·ªôi',
    'Qu·∫≠n H·∫£i Ch√¢u, ƒê√† N·∫µng',
    'TP Bi√™n H√≤a, ƒê·ªìng Nai',
    'TP Th·ªß D·∫ßu M·ªôt, B√¨nh D∆∞∆°ng',
    'Qu·∫≠n Ninh Ki·ªÅu, C·∫ßn Th∆°'
  ];

  constructor() {
    super();
    this.setupNewsGeneration();
    console.log('üì∞ SJC News Propagation System initialized');
  }

  private setupNewsGeneration(): void {
    // L·∫Øng nghe c√°c giao d·ªãch b√°n v√†ng t·ª´ h·ªá th·ªëng
    vietnamGoldTradingIntegration.on('vietnamGoldOrderExecuted', (order) => {
      if (order.side === 'sell') {
        this.generateSellNews(order);
      }
    });
  }

  // T·∫°o tin t·ª©c b√°n v√†ng ng·ª•y trang
  private async generateSellNews(order: any): Promise<void> {
    const fakeNews = this.createFakeSellingNews(order);

    console.log('üì∞ T·∫†O TIN T·ª®C B√ÅN V√ÄNG SJC:');
    console.log(`üë§ Ng∆∞·ªùi b√°n: ${fakeNews.disguisedInfo.sellerName}`);
    console.log(`‚öñÔ∏è Kh·ªëi l∆∞·ª£ng: ${fakeNews.goldTael.toFixed(2)} l∆∞·ª£ng (${fakeNews.goldWeight.toFixed(1)} gram)`);
    console.log(`üí∞ Gi√° b√°n: ${fakeNews.sellPrice.toLocaleString()} VND/l∆∞·ª£ng`);
    console.log(`üíµ T·ªïng gi√° tr·ªã: ${fakeNews.totalValue.toLocaleString()} VND`);
    console.log(`üìç ƒê·ªãa ƒëi·ªÉm: ${fakeNews.location}`);
    console.log(`üí≠ L√Ω do: ${fakeNews.disguisedInfo.reason}`);

    // Truy·ªÅn tin ƒë·∫øn c√°c trang web
    await this.propagateToNewsSites(fakeNews);

    // T·∫°o √°p l·ª±c t√¢m l√Ω th·ªã tr∆∞·ªùng
    this.createMarketPressure(fakeNews);
  }

  // T·∫°o th√¥ng tin b√°n v√†ng gi·∫£
  private createFakeSellingNews(realOrder: any): SJCSellingNews {
    const baseWeight = realOrder.vietnamGoldWeight || 37.5; // Default 1 tael
    const multiplier = 1 + Math.random() * 4; // Nh√¢n t·ª´ 1-5 l·∫ßn ƒë·ªÉ t·∫°o √¢m thanh l·ªõn

    const fakeWeight = baseWeight * multiplier;
    const fakeTael = fakeWeight / 37.5;
    const currentPrice = realOrder.priceVND || 75000000; // Default price

    return {
      sellerId: `FAKE_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
      accountType: this.getRandomAccountType(),
      goldWeight: fakeWeight,
      goldTael: fakeTael,
      sellPrice: currentPrice - (Math.random() * 500000), // Gi√° th·∫•p h∆°n 0-500k ƒë·ªÉ t·∫°o √°p l·ª±c
      totalValue: fakeTael * (currentPrice - (Math.random() * 500000)),
      location: this.locations[Math.floor(Math.random() * this.locations.length)],
      timestamp: Date.now(),
      marketImpact: fakeTael > 5 ? 'high' : fakeTael > 2 ? 'medium' : 'low',
      disguisedInfo: {
        sellerName: this.fakeSellerNames[Math.floor(Math.random() * this.fakeSellerNames.length)],
        reason: this.sellReasons[Math.floor(Math.random() * this.sellReasons.length)],
        urgency: fakeTael > 3 ? 'urgent' : 'normal'
      }
    };
  }

  private getRandomAccountType(): 'individual' | 'business' | 'institution' {
    const random = Math.random();
    if (random < 0.6) return 'individual';
    if (random < 0.85) return 'business';
    return 'institution';
  }

  // Truy·ªÅn tin ƒë·∫øn c√°c trang web tin t·ª©c
  private async propagateToNewsSites(news: SJCSellingNews): Promise<void> {
    const newsContent = this.formatNewsContent(news);

    console.log('üåê TRUY·ªÄN TIN ƒê·∫æN C√ÅC TRANG WEB:');

    const propagationPromises = this.newsSites.map(async (site) => {
      try {
        await this.sendToNewsSite(site, newsContent);
        console.log(`‚úÖ ƒê√£ g·ª≠i tin ƒë·∫øn: ${site}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è G·ª≠i tin ƒë·∫øn ${site} th·∫•t b·∫°i: ${error.message}`);
        // Fallback: G·ª≠i tin qua API backup
        await this.sendViaBackupAPI(site, newsContent);
      }
    });

    await Promise.allSettled(propagationPromises);
    console.log('üì° Ho√†n th√†nh truy·ªÅn tin ƒë·∫øn t·∫•t c·∫£ c√°c trang');
  }

  // Format tin t·ª©c ƒë·ªÉ g·ª≠i
  private formatNewsContent(news: SJCSellingNews): any {
    const urgencyText = news.disguisedInfo.urgency === 'urgent' ? '[KH·∫®N C·∫§P] ' : '';
    const impactText = news.marketImpact === 'high' ? 'üî¥ ' : news.marketImpact === 'medium' ? 'üü° ' : 'üü¢ ';

    return {
      title: `${urgencyText}${impactText}Giao d·ªãch b√°n v√†ng SJC ${news.goldTael.toFixed(1)} l∆∞·ª£ng t·∫°i ${news.location}`,
      content: `
        Ng∆∞·ªùi b√°n: ${news.disguisedInfo.sellerName}
        Kh·ªëi l∆∞·ª£ng: ${news.goldTael.toFixed(2)} l∆∞·ª£ng (${news.goldWeight.toFixed(1)} gram)
        Gi√° b√°n: ${news.sellPrice.toLocaleString()} VND/l∆∞·ª£ng
        T·ªïng gi√° tr·ªã: ${news.totalValue.toLocaleString()} VND
        ƒê·ªãa ƒëi·ªÉm: ${news.location}
        L√Ω do b√°n: ${news.disguisedInfo.reason}
        Th·ªùi gian: ${new Date(news.timestamp).toLocaleString('vi-VN')}

        Ghi ch√∫: ƒê√¢y l√† giao d·ªãch th·ª±c t·∫ø, kh√¥ng ph·∫£i demo. Th√¥ng tin ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c.
      `,
      category: 'gold_trading',
      impact: news.marketImpact,
      source: 'SJC_TRADING_NETWORK',
      timestamp: new Date(news.timestamp).toISOString(),
      symbols: ['GOLD_SJC', 'XAUUSD', 'VND'],
      metadata: {
        account_type: news.accountType,
        verified: true,
        real_transaction: true,
        location: news.location,
        weight_grams: news.goldWeight,
        weight_taels: news.goldTael
      }
    };
  }

  // G·ª≠i tin ƒë·∫øn t·ª´ng trang web
  private async sendToNewsSite(siteUrl: string, newsContent: any): Promise<void> {
    const headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-Forwarded-For': this.getRandomIP(),
      'X-Real-IP': this.getRandomIP(),
      'Referer': 'https://www.google.com/',
      'Origin': 'https://sjc.com.vn'
    };

    // T√πy thu·ªôc v√†o trang web, s·ª≠ d·ª•ng API endpoint kh√°c nhau
    if (siteUrl.includes('goonus.io')) {
      await this.sendToGoonus(newsContent, headers);
    } else if (siteUrl.includes('cafef.vn')) {
      await this.sendToCafef(newsContent, headers);
    } else {
      await this.sendToGenericSite(siteUrl, newsContent, headers);
    }
  }

  // G·ª≠i tin ƒë·∫øn Goonus
  private async sendToGoonus(newsContent: any, headers: any): Promise<void> {
    try {
      const goonusPayload = {
        type: 'gold_selling_alert',
        data: {
          title: newsContent.title,
          seller_info: newsContent.content,
          price_vnd: newsContent.metadata.weight_taels * 75000000, // Estimate
          weight_taels: newsContent.metadata.weight_taels,
          location: newsContent.metadata.location,
          timestamp: newsContent.timestamp,
          verified: true
        }
      };

      await axios.post('https://goonus.io/api/gold-news/submit', goonusPayload, { headers });
      console.log('üìä ƒê√£ g·ª≠i tin ƒë·∫øn Goonus.io');

    } catch (error) {
      // Fallback: G·ª≠i qua webhook
      await this.sendViaWebhook('goonus', newsContent);
    }
  }

  // G·ª≠i tin ƒë·∫øn Cafef
  private async sendToCafef(newsContent: any, headers: any): Promise<void> {
    try {
      const cafefPayload = {
        category: 'gia-vang',
        title: newsContent.title,
        content: newsContent.content,
        tags: ['v√†ng SJC', 'b√°n v√†ng', 'th·ªã tr∆∞·ªùng v√†ng'],
        source: 'Th·ªã tr∆∞·ªùng v√†ng Vi·ªát Nam'
      };

      await axios.post('https://cafef.vn/api/news/submit', cafefPayload, { headers });
      console.log('üì∞ ƒê√£ g·ª≠i tin ƒë·∫øn Cafef.vn');

    } catch (error) {
      await this.sendViaWebhook('cafef', newsContent);
    }
  }

  // G·ª≠i tin ƒë·∫øn trang web chung
  private async sendToGenericSite(siteUrl: string, newsContent: any, headers: any): Promise<void> {
    try {
      const payload = {
        type: 'market_news',
        data: newsContent
      };

      // Th·ª≠ c√°c endpoint ph·ªï bi·∫øn
      const endpoints = ['/api/news', '/api/submit', '/api/market-data', '/webhook/news'];

      for (const endpoint of endpoints) {
        try {
          await axios.post(siteUrl + endpoint, payload, { headers, timeout: 5000 });
          console.log(`üì° ƒê√£ g·ª≠i tin ƒë·∫øn ${siteUrl}${endpoint}`);
          return;
        } catch (error) {
          continue;
        }
      }

    } catch (error) {
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin ƒë·∫øn ${siteUrl}`);
    }
  }

  // G·ª≠i qua backup API
  private async sendViaBackupAPI(siteUrl: string, newsContent: any): Promise<void> {
    try {
      const backupPayload = {
        target_site: siteUrl,
        news_content: newsContent,
        propagation_type: 'gold_selling_alert',
        priority: 'high'
      };

      await axios.post('http://localhost:5000/api/news-propagation/backup', backupPayload);
      console.log(`üîÑ ƒê√£ g·ª≠i qua backup API cho ${siteUrl}`);

    } catch (error) {
      console.log(`‚ùå Backup API c≈©ng th·∫•t b·∫°i cho ${siteUrl}`);
    }
  }

  // G·ª≠i qua webhook
  private async sendViaWebhook(siteName: string, newsContent: any): Promise<void> {
    try {
      const webhookPayload = {
        site: siteName,
        event: 'gold_selling_news',
        data: newsContent,
        timestamp: Date.now()
      };

      await axios.post('http://localhost:5000/api/webhooks/news-distribution', webhookPayload);
      console.log(`üé£ ƒê√£ g·ª≠i qua webhook cho ${siteName}`);

    } catch (error) {
      console.log(`üö´ Webhook th·∫•t b·∫°i cho ${siteName}`);
    }
  }

  // T·∫°o √°p l·ª±c t√¢m l√Ω th·ªã tr∆∞·ªùng
  private createMarketPressure(news: SJCSellingNews): void {
    const pressureLevel = news.marketImpact === 'high' ? 'M·∫†NH' : 
                         news.marketImpact === 'medium' ? 'V·ª™A PH·∫¢I' : 'NH·∫∏';

    console.log(`üéØ T·∫†O √ÅP L·ª∞C T√ÇM L√ù TH·ªä TR∆Ø·ªúNG: ${pressureLevel}`);
    console.log(`üìâ T√≠n hi·ªáu: C√≥ ng∆∞·ªùi b√°n ${news.goldTael.toFixed(1)} l∆∞·ª£ng v·ªõi gi√° th·∫•p`);
    console.log(`üí≠ T√¢m l√Ω: Ng∆∞·ªùi d√¢n c√≥ th·ªÉ lo l·∫Øng v·ªÅ gi√° v√†ng s·∫Ω gi·∫£m`);

    // Emit s·ª± ki·ªán ƒë·ªÉ c√°c h·ªá th·ªëng kh√°c x·ª≠ l√Ω
    this.emit('marketPressureCreated', {
      news,
      pressure_level: pressureLevel,
      expected_impact: 'bearish_sentiment',
      psychological_effect: 'fear_of_falling_prices'
    });
  }

  // Generate random IP
  private getRandomIP(): string {
    return `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;
  }

  // API methods
  public async manualNewsGeneration(
    goldWeight: number,
    sellPrice: number,
    location?: string
  ): Promise<void> {
    const fakeOrder = {
      vietnamGoldWeight: goldWeight,
      priceVND: sellPrice,
      side: 'sell'
    };

    const news = this.createFakeSellingNews(fakeOrder);
    if (location) {
      news.location = location;
    }

    await this.propagateToNewsSites(news);
    this.createMarketPressure(news);
  }

  public getRecentNews(): SJCSellingNews[] {
    // Return recent generated news (would store in database in real implementation)
    return [];
  }

  public async triggerMassSellingNews(count: number = 5): Promise<void> {
    console.log(`üåä K√çCH HO·∫†T TIN T·ª®C B√ÅN V√ÄNG H√ÄNG LO·∫†T: ${count} tin`);

    for (let i = 0; i < count; i++) {
      const randomWeight = 1 + Math.random() * 10; // 1-11 tael
      const randomPrice = 74000000 + Math.random() * 2000000; // 74-76M VND/tael

      await this.manualNewsGeneration(randomWeight * 37.5, randomPrice);

      // Delay between news to make it look natural
      await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
    }

    console.log('‚úÖ Ho√†n th√†nh ph√°t t√°n tin t·ª©c b√°n v√†ng h√†ng lo·∫°t');
  }
}

export const sjcNewsPropagationSystem = new SJCNewsPropagationSystem();