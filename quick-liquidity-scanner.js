
// Quick Liquidity Scanner - Ch√®n code n√†y ƒë·ªÉ qu√©t thanh kho·∫£n
const quickLiquidityScan = {
  // Qu√©t thanh kho·∫£n cho b·∫•t k·ª≥ c·∫∑p ti·ªÅn/h√†ng h√≥a n√†o
  scanMarket: async (symbol, side = 'both') => {
    console.log(`üîç Scanning ${symbol} - Side: ${side}`);
    
    const results = {
      symbol: symbol,
      timestamp: new Date().toISOString(),
      side: side,
      liquidity: {}
    };

    // Qu√©t phe MUA (BUY)
    if (side === 'buy' || side === 'both') {
      results.liquidity.buy = {
        price: Math.random() * 100000 + 75000000, // Gi√° mua gi·∫£ l·∫≠p
        volume: Math.random() * 1000000,
        spread: Math.random() * 50000,
        signal: Math.random() > 0.5 ? 'STRONG' : 'WEAK'
      };
      console.log(`üí∞ BUY Side - Price: ${results.liquidity.buy.price.toLocaleString()}`);
    }

    // Qu√©t phe B√ÅN (SELL) 
    if (side === 'sell' || side === 'both') {
      results.liquidity.sell = {
        price: Math.random() * 100000 + 75100000, // Gi√° b√°n gi·∫£ l·∫≠p
        volume: Math.random() * 1000000,
        spread: Math.random() * 50000,
        signal: Math.random() > 0.5 ? 'STRONG' : 'WEAK'
      };
      console.log(`üí∏ SELL Side - Price: ${results.liquidity.sell.price.toLocaleString()}`);
    }

    // Ph√¢n t√≠ch arbitrage gi·ªØa 2 phe
    if (side === 'both' && results.liquidity.buy && results.liquidity.sell) {
      const arbitrage = results.liquidity.sell.price - results.liquidity.buy.price;
      results.arbitrage = {
        profit: arbitrage,
        profitPercent: (arbitrage / results.liquidity.buy.price) * 100,
        signal: arbitrage > 50000 ? 'OPPORTUNITY' : 'NO_OPPORTUNITY'
      };
      console.log(`üéØ Arbitrage: ${arbitrage.toLocaleString()} VND (${results.arbitrage.profitPercent.toFixed(2)}%)`);
    }

    return results;
  },

  // Qu√©t nhi·ªÅu th·ªã tr∆∞·ªùng c√πng l√∫c
  scanMultipleMarkets: async (symbols, side = 'both') => {
    console.log(`üöÄ Multi-market scan for ${symbols.length} symbols`);
    
    const allResults = [];
    for (const symbol of symbols) {
      const result = await quickLiquidityScan.scanMarket(symbol, side);
      allResults.push(result);
      await new Promise(resolve => setTimeout(resolve, 100)); // Delay nh·ªè
    }

    // T√¨m c∆° h·ªôi t·ªët nh·∫•t
    const bestOpportunity = allResults
      .filter(r => r.arbitrage && r.arbitrage.signal === 'OPPORTUNITY')
      .sort((a, b) => b.arbitrage.profit - a.arbitrage.profit)[0];

    if (bestOpportunity) {
      console.log(`üèÜ BEST OPPORTUNITY: ${bestOpportunity.symbol} - ${bestOpportunity.arbitrage.profit.toLocaleString()} VND`);
    }

    return allResults;
  }
};

// S·ª≠ d·ª•ng ngay:
// quickLiquidityScan.scanMarket('XAUUSD', 'buy');     // Ch·ªâ qu√©t phe mua
// quickLiquidityScan.scanMarket('XAUUSD', 'sell');    // Ch·ªâ qu√©t phe b√°n  
// quickLiquidityScan.scanMarket('XAUUSD', 'both');    // Qu√©t c·∫£ 2 phe

// Qu√©t nhi·ªÅu th·ªã tr∆∞·ªùng:
// quickLiquidityScan.scanMultipleMarkets(['XAUUSD', 'EURUSD', 'GBPUSD'], 'both');

module.exports = quickLiquidityScan;
