#!/bin/bash

# AWS Replication Installer Setup Script
# K·∫øt n·ªëi t·ªõi AWS Application Migration Service (ap-northeast-1)

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# AWS Configuration
AWS_REGION="ap-northeast-1"
AWS_INSTALLER_URL="https://aws-application-migration-service-ap-northeast-1.s3.ap-northeast-1.amazonaws.com/latest/linux/aws-replication-installer-init"
INSTALLER_FILE="./aws-replication-installer-init"

echo -e "${BLUE}üåê AWS Application Migration Service Setup${NC}"
echo "=========================================="
echo "Region: $AWS_REGION"
echo "Installer URL: $AWS_INSTALLER_URL"
echo

# Function to check prerequisites
check_prerequisites() {
    echo -e "${YELLOW}üìã Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt...${NC}"
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}‚ùå Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root (sudo)${NC}"
        exit 1
    fi
    
    # Check internet connectivity
    if ! ping -c 1 aws.amazon.com &> /dev/null; then
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi AWS${NC}"
        exit 1
    fi
    
    # Check required tools
    local required_tools=("wget" "curl" "systemctl")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            echo -e "${RED}‚ùå C·∫ßn c√†i ƒë·∫∑t: $tool${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}‚úÖ T·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë√£ s·∫µn s√†ng${NC}"
}

# Function to download AWS replication installer
download_installer() {
    echo -e "${YELLOW}üì• T·∫£i AWS Replication Installer...${NC}"
    
    # Remove existing installer if present
    if [[ -f "$INSTALLER_FILE" ]]; then
        rm -f "$INSTALLER_FILE"
        echo "ƒê√£ x√≥a installer c≈©"
    fi
    
    # Download with proper headers and retry logic
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if wget -O "$INSTALLER_FILE" \
            --timeout=30 \
            --tries=3 \
            --retry-connrefused \
            --user-agent="Mozilla/5.0 (Linux; x86_64) AppleWebKit/537.36" \
            --header="Accept: application/octet-stream" \
            "$AWS_INSTALLER_URL"; then
            
            echo -e "${GREEN}‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng installer${NC}"
            break
        else
            retry_count=$((retry_count + 1))
            echo -e "${YELLOW}‚ö†Ô∏è Th·ª≠ l·∫°i l·∫ßn $retry_count/$max_retries...${NC}"
            sleep 5
        fi
    done
    
    if [[ $retry_count -eq $max_retries ]]; then
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫£i installer sau $max_retries l·∫ßn th·ª≠${NC}"
        exit 1
    fi
    
    # Make executable
    chmod +x "$INSTALLER_FILE"
    echo -e "${GREEN}‚úÖ Installer ƒë√£ s·∫µn s√†ng ch·∫°y${NC}"
}

# Function to run installer in background (non-hanging)
run_installer_background() {
    echo -e "${YELLOW}üöÄ Ch·∫°y AWS Replication Installer...${NC}"
    
    # Create log file
    local log_file="/tmp/aws-replication-installer.log"
    
    # Run installer in background with proper logging
    nohup "$INSTALLER_FILE" \
        --region="$AWS_REGION" \
        --no-prompt \
        --log-level=info \
        > "$log_file" 2>&1 &
    
    local installer_pid=$!
    
    echo -e "${GREEN}‚úÖ Installer ƒëang ch·∫°y trong background${NC}"
    echo "PID: $installer_pid"
    echo "Log file: $log_file"
    
    # Monitor for initial few seconds
    sleep 5
    
    if ps -p $installer_pid > /dev/null; then
        echo -e "${GREEN}‚úÖ Installer ƒëang ch·∫°y b√¨nh th∆∞·ªùng${NC}"
        echo "ƒê·ªÉ theo d√µi ti·∫øn tr√¨nh: tail -f $log_file"
        echo "ƒê·ªÉ ki·ªÉm tra tr·∫°ng th√°i: ps -p $installer_pid"
    else
        echo -e "${RED}‚ùå Installer ƒë√£ d·ª´ng b·∫•t th∆∞·ªùng${NC}"
        echo "Ki·ªÉm tra log: cat $log_file"
        exit 1
    fi
}

# Function to run installer with timeout (prevent hanging)
run_installer_timeout() {
    echo -e "${YELLOW}üöÄ Ch·∫°y AWS Replication Installer v·ªõi timeout...${NC}"
    
    local timeout_seconds=300  # 5 minutes
    local log_file="/tmp/aws-replication-installer.log"
    
    # Run with timeout to prevent hanging
    timeout "$timeout_seconds" "$INSTALLER_FILE" \
        --region="$AWS_REGION" \
        --no-prompt \
        --log-level=info \
        > "$log_file" 2>&1 &
    
    local installer_pid=$!
    
    echo "PID: $installer_pid"
    echo "Timeout: $timeout_seconds seconds"
    echo "Log file: $log_file"
    
    # Wait for completion or timeout
    wait $installer_pid
    local exit_code=$?
    
    if [[ $exit_code -eq 124 ]]; then
        echo -e "${RED}‚ùå Installer timeout sau $timeout_seconds gi√¢y${NC}"
        exit 1
    elif [[ $exit_code -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Installer ho√†n th√†nh th√†nh c√¥ng${NC}"
    else
        echo -e "${RED}‚ùå Installer l·ªói v·ªõi exit code: $exit_code${NC}"
        exit 1
    fi
}

# Function to check installer status
check_installer_status() {
    echo -e "${YELLOW}üìä Ki·ªÉm tra tr·∫°ng th√°i AWS Replication Service...${NC}"
    
    # Check if AWS replication agent is running
    if systemctl is-active --quiet aws-replication-agent; then
        echo -e "${GREEN}‚úÖ AWS Replication Agent ƒëang ch·∫°y${NC}"
        systemctl status aws-replication-agent --no-pager
    else
        echo -e "${RED}‚ùå AWS Replication Agent ch∆∞a ch·∫°y${NC}"
    fi
    
    # Check network connectivity to AWS
    if curl -s --connect-timeout 5 "https://mgn.$AWS_REGION.amazonaws.com" > /dev/null; then
        echo -e "${GREEN}‚úÖ K·∫øt n·ªëi t·ªõi AWS MGN service b√¨nh th∆∞·ªùng${NC}"
    else
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi AWS MGN service${NC}"
    fi
}

# Function to stop installer if hanging
stop_installer() {
    echo -e "${YELLOW}‚èπÔ∏è D·ª´ng AWS Replication Installer...${NC}"
    
    # Find and kill installer processes
    pkill -f "aws-replication-installer" || true
    
    # Stop AWS replication agent if running
    systemctl stop aws-replication-agent || true
    
    echo -e "${GREEN}‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ processes li√™n quan${NC}"
}

# Main function
main() {
    case "${1:-install}" in
        "install")
            check_prerequisites
            download_installer
            run_installer_background
            ;;
        "install-timeout")
            check_prerequisites
            download_installer
            run_installer_timeout
            ;;
        "status")
            check_installer_status
            ;;
        "stop")
            stop_installer
            ;;
        "help"|"--help")
            echo "S·ª≠ d·ª•ng: $0 [install|install-timeout|status|stop|help]"
            echo
            echo "Commands:"
            echo "  install         - C√†i ƒë·∫∑t v√† ch·∫°y installer trong background"
            echo "  install-timeout - C√†i ƒë·∫∑t v·ªõi timeout ƒë·ªÉ tr√°nh treo"
            echo "  status          - Ki·ªÉm tra tr·∫°ng th√°i service"
            echo "  stop            - D·ª´ng installer v√† service"
            echo "  help            - Hi·ªÉn th·ªã tr·ª£ gi√∫p"
            ;;
        *)
            echo -e "${RED}‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: $1${NC}"
            echo "S·ª≠ d·ª•ng: $0 help ƒë·ªÉ xem tr·ª£ gi√∫p"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"