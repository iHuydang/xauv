AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Application Migration Service Setup with Service Catalog App Registry Integration'

Parameters:
  InstanceId:
    Type: String
    Default: 'i-05c4d8f39e43b8280'
    Description: 'EC2 Instance ID for migration source'
  
  InstanceName:
    Type: String
    Default: 'frb'
    Description: 'Name tag for the instance'
  
  AWSAccessKeyId:
    Type: String
    Default: 'ieagleviet@gmail.com'
    Description: 'AWS Access Key ID for replication agent'
    NoEcho: true
  
  AWSSecretAccessKey:
    Type: String
    Default: '$Xcz$ApH*=M55#2'
    Description: 'AWS Secret Access Key for replication agent'
    NoEcho: true
  
  ApplicationId:
    Type: String
    Default: '0eju8n6pts35orkeq2rhez420p'
    Description: 'Service Catalog Application Registry ID'

Resources:
  # IAM Role for AWS Application Migration Service
  ApplicationMigrationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-AMS-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - mgn.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSApplicationMigrationAgentPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # Instance Profile for EC2
  ApplicationMigrationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ApplicationMigrationServiceRole

  # Systems Manager Document for Replication Agent Installation
  ReplicationAgentInstallDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      Name: !Sub '${AWS::StackName}-InstallReplicationAgent'
      Content:
        schemaVersion: '2.2'
        description: 'Install AWS Application Migration Service Replication Agent with timeout protection'
        parameters:
          region:
            type: String
            description: 'AWS Region'
            default: !Ref 'AWS::Region'
          accessKeyId:
            type: String
            description: 'AWS Access Key ID'
            default: !Ref AWSAccessKeyId
          secretAccessKey:
            type: String
            description: 'AWS Secret Access Key'
            default: !Ref AWSSecretAccessKey
        mainSteps:
          - action: aws:runShellScript
            name: InstallAgent
            inputs:
              timeoutSeconds: '600'
              runCommand:
                - '#!/bin/bash'
                - 'set -e'
                - 'echo "Starting AWS Replication Agent installation..."'
                - 'echo "Region: {{ region }}"'
                - 'echo "Timestamp: $(date)"'
                - ''
                - '# Download installer with retry mechanism'
                - 'INSTALLER_URL="https://aws-application-migration-service-{{ region }}.s3.{{ region }}.amazonaws.com/latest/linux/aws-replication-installer-init"'
                - 'INSTALLER_FILE="/tmp/aws-replication-installer-init"'
                - ''
                - 'for i in {1..3}; do'
                - '  if wget -O "$INSTALLER_FILE" "$INSTALLER_URL"; then'
                - '    echo "Download successful on attempt $i"'
                - '    break'
                - '  else'
                - '    echo "Download failed on attempt $i"'
                - '    sleep 5'
                - '  fi'
                - 'done'
                - ''
                - '# Verify download'
                - 'if [ ! -f "$INSTALLER_FILE" ]; then'
                - '  echo "ERROR: Failed to download installer"'
                - '  exit 1'
                - 'fi'
                - ''
                - '# Make executable'
                - 'chmod +x "$INSTALLER_FILE"'
                - 'ls -lh "$INSTALLER_FILE"'
                - ''
                - '# Install agent with timeout protection'
                - 'echo "Installing replication agent..."'
                - 'timeout 480 "$INSTALLER_FILE" \'
                - '  --region "{{ region }}" \'
                - '  --aws-access-key-id "{{ accessKeyId }}" \'
                - '  --aws-secret-access-key "{{ secretAccessKey }}" \'
                - '  --no-prompt'
                - ''
                - '# Verify installation'
                - 'echo "Verifying installation..."'
                - 'systemctl status aws-replication-agent'
                - 'echo "Installation completed successfully"'
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # CloudWatch Log Group for monitoring
  ReplicationAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/applicationmigration/${AWS::StackName}'
      RetentionInDays: 30
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # CloudWatch Alarm for Replication Agent Health
  ReplicationAgentHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-ReplicationAgent-Health'
      AlarmDescription: 'Monitor AWS Replication Agent health'
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceId
      AlarmActions:
        - !Ref ReplicationAgentHealthTopic
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # SNS Topic for notifications
  ReplicationAgentHealthTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-ReplicationAgent-Alerts'
      DisplayName: 'AWS Replication Agent Health Alerts'
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # Lambda function for automated remediation
  ReplicationAgentRemediationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ReplicationAgent-Remediation'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ReplicationAgentRemediationRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          ssm = boto3.client('ssm')
          
          def lambda_handler(event, context):
              """
              Automated remediation for replication agent issues
              """
              try:
                  instance_id = event.get('instance_id', 'i-05c4d8f39e43b8280')
                  document_name = event.get('document_name', 'AWS-RunShellScript')
                  
                  # Restart replication agent service
                  response = ssm.send_command(
                      InstanceIds=[instance_id],
                      DocumentName=document_name,
                      Parameters={
                          'commands': [
                              '#!/bin/bash',
                              'systemctl restart aws-replication-agent',
                              'sleep 10',
                              'systemctl status aws-replication-agent'
                          ]
                      }
                  )
                  
                  command_id = response['Command']['CommandId']
                  logger.info(f"Remediation command sent: {command_id}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Remediation initiated',
                          'command_id': command_id
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Remediation failed: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # IAM Role for Lambda remediation function
  ReplicationAgentRemediationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMCommandExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:DescribeInstanceInformation
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

  # EventBridge Rule for automated monitoring
  ReplicationAgentMonitoringRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-ReplicationAgent-Monitoring'
      Description: 'Monitor replication agent status'
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ReplicationAgentRemediationFunction.Arn
          Id: 'ReplicationAgentHealthCheck'
          Input: !Sub |
            {
              "instance_id": "${InstanceId}",
              "document_name": "AWS-RunShellScript"
            }

  # Permission for EventBridge to invoke Lambda
  ReplicationAgentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReplicationAgentRemediationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ReplicationAgentMonitoringRule.Arn

  # Service Catalog App Registry Association
  AppRegistryApplicationStackAssociation:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !Sub 'arn:aws:servicecatalog:${AWS::Region}:${AWS::AccountId}:/applications/${ApplicationId}'
      Resource: !Ref 'AWS::StackId'
      ResourceType: CFN_STACK

  # Application Migration Service Launch Template
  MigrationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-Migration-Template'
      LaunchTemplateData:
        ImageId: ami-0d52744d6551d851e  # Amazon Linux 2 in ap-northeast-1
        InstanceType: t3.medium
        IamInstanceProfile:
          Arn: !GetAtt ApplicationMigrationInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref MigrationSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-Migration-Target'
              - Key: Purpose
                Value: ApplicationMigrationService
              - Key: Environment
                Value: Production

  # Security Group for migrated instances
  MigrationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-Migration-SG'
      GroupDescription: 'Security group for AWS Application Migration Service'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'SSH access'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Migration-SG'
        - Key: Purpose
          Value: ApplicationMigrationService
        - Key: Environment
          Value: Production

Outputs:
  StackId:
    Description: 'CloudFormation Stack ID'
    Value: !Ref 'AWS::StackId'
    Export:
      Name: !Sub '${AWS::StackName}-StackId'

  ApplicationMigrationServiceRoleArn:
    Description: 'IAM Role ARN for Application Migration Service'
    Value: !GetAtt ApplicationMigrationServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AMS-Role-Arn'

  ReplicationAgentInstallDocumentName:
    Description: 'SSM Document name for replication agent installation'
    Value: !Ref ReplicationAgentInstallDocument
    Export:
      Name: !Sub '${AWS::StackName}-Install-Document'

  ReplicationAgentLogGroupName:
    Description: 'CloudWatch Log Group for replication agent'
    Value: !Ref ReplicationAgentLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'

  MigrationLaunchTemplateId:
    Description: 'Launch Template ID for migration targets'
    Value: !Ref MigrationLaunchTemplate
    Export:
      Name: !Sub '${AWS::StackName}-LaunchTemplate'

  MigrationSecurityGroupId:
    Description: 'Security Group ID for migrated instances'
    Value: !Ref MigrationSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'

  AppRegistryAssociationId:
    Description: 'Service Catalog App Registry Association'
    Value: !Ref AppRegistryApplicationStackAssociation
    Export:
      Name: !Sub '${AWS::StackName}-AppRegistry-Association'

  ReplicationAgentHealthAlarmName:
    Description: 'CloudWatch Alarm for replication agent health'
    Value: !Ref ReplicationAgentHealthAlarm
    Export:
      Name: !Sub '${AWS::StackName}-HealthAlarm'

  RemediationFunctionName:
    Description: 'Lambda function for automated remediation'
    Value: !Ref ReplicationAgentRemediationFunction
    Export:
      Name: !Sub '${AWS::StackName}-RemediationFunction'