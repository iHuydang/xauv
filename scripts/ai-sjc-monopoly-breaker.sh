
#!/bin/bash

# AI SJC Monopoly Breaker
# Advanced AI Agent for Breaking SJC Gold Monopoly

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

API_BASE="http://localhost:5000"

show_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë           ü§ñ AI SJC MONOPOLY BREAKER ü§ñ                   ‚ïë"
    echo "‚ïë         Advanced AI Agent for Market Liberation            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${CYAN}üß† Machine Learning Algorithms: ACTIVE${NC}"
    echo -e "${CYAN}üï∑Ô∏è Swarm Coordination: ENABLED${NC}"
    echo -e "${CYAN}üìä Real-time Analysis: RUNNING${NC}"
    echo -e "${CYAN}‚öîÔ∏è Multi-vector Attack: READY${NC}"
    echo ""
}

show_menu() {
    echo -e "${YELLOW}ü§ñ AI SJC MONOPOLY BREAKER MENU:${NC}"
    echo ""
    echo -e "${GREEN}=== ANALYSIS & INTELLIGENCE ===${NC}"
    echo -e "${GREEN}1.${NC} monopoly_analysis      - AI ph√¢n t√≠ch ƒë·ªôc quy·ªÅn SJC"
    echo -e "${GREEN}2.${NC} exploitation_score     - T√≠nh ƒëi·ªÉm khai th√°c SJC"
    echo -e "${GREEN}3.${NC} market_simulation      - M√¥ ph·ªèng AI th·ªã tr∆∞·ªùng"
    echo -e "${GREEN}4.${NC} optimal_timing         - AI t√≠nh th·ªùi ƒëi·ªÉm t·ªëi ∆∞u"
    echo ""
    echo -e "${BLUE}=== AI ATTACK EXECUTION ===${NC}"
    echo -e "${BLUE}5.${NC} execute_low           - Th·ª±c thi AI c∆∞·ªùng ƒë·ªô th·∫•p (1-5)"
    echo -e "${BLUE}6.${NC} execute_medium        - Th·ª±c thi AI c∆∞·ªùng ƒë·ªô trung (6-10)"
    echo -e "${BLUE}7.${NC} execute_high          - Th·ª±c thi AI c∆∞·ªùng ƒë·ªô cao (11-15)"
    echo -e "${BLUE}8.${NC} execute_extreme       - Th·ª±c thi AI c∆∞·ªùng ƒë·ªô c·ª±c ƒë·∫°i (16-20)"
    echo -e "${BLUE}9.${NC} execute_custom        - Th·ª±c thi AI t√πy ch·ªânh"
    echo ""
    echo -e "${PURPLE}=== AI SWARM COORDINATION ===${NC}"
    echo -e "${PURPLE}10.${NC} activate_swarm        - K√≠ch ho·∫°t b·∫ßy AI agents"
    echo -e "${PURPLE}11.${NC} sentiment_manipulation - AI thao t√∫ng d∆∞ lu·∫≠n"
    echo -e "${PURPLE}11A.${NC} custom_sentiment      - T·∫°o n·ªôi dung thao t√∫ng t√πy ch·ªânh"
    echo -e "${PURPLE}11B.${NC} batch_sentiment       - T·∫°o h√†ng lo·∫°t n·ªôi dung thao t√∫ng"
    echo -e "${PURPLE}12.${NC} economic_disruption   - AI ph√° v·ª° kinh t·∫ø"
    echo -e "${PURPLE}13.${NC} federated_learning    - AI h·ªçc li√™n k·∫øt"
    echo ""
    echo -e "${RED}=== ADVANCED AI STRATEGIES ===${NC}"
    echo -e "${RED}14.${NC} price_arbitrage_ai     - AI khai th√°c ch√™nh l·ªách gi√°"
    echo -e "${RED}15.${NC} tokenized_gold_deploy  - AI tri·ªÉn khai v√†ng token"
    echo -e "${RED}16.${NC} international_pressure - AI √°p l·ª±c qu·ªëc t·∫ø"
    echo -e "${RED}17.${NC} regulatory_bypass      - AI v∆∞·ª£t qua quy ƒë·ªãnh"
    echo ""
    echo -e "${CYAN}=== MONITORING & CONTROL ===${NC}"
    echo -e "${CYAN}18.${NC} ai_status             - Tr·∫°ng th√°i AI system"
    echo -e "${CYAN}19.${NC} swarm_status          - Tr·∫°ng th√°i AI swarm"
    echo -e "${CYAN}20.${NC} success_metrics       - Metrics th√†nh c√¥ng AI"
    echo -e "${CYAN}21.${NC} stop_all_ai           - D·ª´ng t·∫•t c·∫£ AI"
    echo ""
}

# 1. AI Monopoly Analysis
monopoly_analysis() {
    echo -e "${GREEN}ü§ñ AI ANALYZING SJC MONOPOLY...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/analyze-monopoly" \
        -H "Content-Type: application/json" \
        -d '{
            "include_international": true,
            "include_sentiment": true,
            "ai_depth": "DEEP_ANALYSIS"
        }' | jq '.'
}

# 2. Exploitation Score
exploitation_score() {
    echo -e "${BLUE}üìä AI CALCULATING EXPLOITATION SCORE...${NC}"
    
    curl -X GET "$API_BASE/api/ai-sjc/exploitation-score" | jq '.'
}

# 3. Market Simulation
market_simulation() {
    local strategy=${1:-"TOKENIZED_GOLD"}
    
    echo -e "${PURPLE}üéÆ AI MARKET SIMULATION: $strategy${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/simulate-disruption" \
        -H "Content-Type: application/json" \
        -d '{
            "strategy": "'$strategy'",
            "simulation_depth": "COMPREHENSIVE",
            "monte_carlo_runs": 1000,
            "ai_confidence": 0.95
        }' | jq '.'
}

# 4. Optimal Timing
optimal_timing() {
    echo -e "${CYAN}‚è∞ AI CALCULATING OPTIMAL ATTACK TIMING...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/optimal-timing" \
        -H "Content-Type: application/json" \
        -d '{
            "factors": ["market_hours", "volatility", "sentiment", "regulatory"],
            "prediction_horizon": 168,
            "ai_model": "TEMPORAL_OPTIMIZATION"
        }' | jq '.'
}

# 5-9. Execute AI with different intensities
execute_ai() {
    local intensity=${1:-12}
    local custom_params=${2:-"{}"}
    
    echo -e "${RED}üö® EXECUTING AI SJC MONOPOLY BREAKER - INTENSITY $intensity${NC}"
    echo -e "${YELLOW}‚ö° AI algorithms activating...${NC}"
    echo -e "${YELLOW}üß† Machine learning models engaged...${NC}"
    echo -e "${YELLOW}üï∑Ô∏è Swarm coordination initiated...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/execute-monopoly-breaking" \
        -H "Content-Type: application/json" \
        -d '{
            "intensity": '$intensity',
            "ai_params": '$custom_params',
            "enable_swarm": true,
            "enable_sentiment": true,
            "enable_economic_disruption": true,
            "learning_rate": 0.1,
            "adaptation_enabled": true
        }' | jq '.'
}

execute_low() {
    execute_ai $(( RANDOM % 5 + 1 )) '{"mode": "conservative", "risk_tolerance": "low"}'
}

execute_medium() {
    execute_ai $(( RANDOM % 5 + 6 )) '{"mode": "moderate", "risk_tolerance": "medium"}'
}

execute_high() {
    execute_ai $(( RANDOM % 5 + 11 )) '{"mode": "aggressive", "risk_tolerance": "high"}'
}

execute_extreme() {
    execute_ai $(( RANDOM % 5 + 16 )) '{"mode": "maximum", "risk_tolerance": "extreme"}'
}

execute_custom() {
    echo -e "${BLUE}üéØ Enter custom intensity (1-20):${NC}"
    read -p "Intensity: " intensity
    
    echo -e "${BLUE}üîß Enter AI parameters (JSON format, or press Enter for default):${NC}"
    read -p "Parameters: " params
    
    if [ -z "$params" ]; then
        params='{"mode": "custom", "adaptive": true}'
    fi
    
    execute_ai "$intensity" "$params"
}

# 10. Activate Swarm
activate_swarm() {
    echo -e "${PURPLE}üï∑Ô∏è ACTIVATING AI AGENT SWARM...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/activate-swarm" \
        -H "Content-Type: application/json" \
        -d '{
            "swarm_size": 50,
            "coordination_level": "FULL",
            "roles": [
                "PRICE_MONITOR",
                "SENTIMENT_MANIPULATOR", 
                "ARBITRAGE_EXECUTOR",
                "MARKET_DISRUPTOR",
                "INTELLIGENCE_GATHERER"
            ],
            "learning_enabled": true
        }' | jq '.'
}

# 11. Sentiment Manipulation
sentiment_manipulation() {
    local intensity=${1:-"HIGH"}
    
    echo -e "${RED}üï∑Ô∏è AI SENTIMENT MANIPULATION: $intensity${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/sentiment-manipulation" \
        -H "Content-Type: application/json" \
        -d '{
            "intensity": "'$intensity'",
            "platforms": ["facebook", "zalo", "tiktok", "youtube", "news_sites"],
            "ai_generated_content": true,
            "natural_language_processing": true,
            "viral_coefficient_target": 2.5
        }' | jq '.'
}

# 11A. Custom Content Sentiment Manipulation
custom_sentiment_manipulation() {
    echo -e "${RED}üìù T·∫†O N·ªòI DUNG THAO T√öNG D∆Ø LU·∫¨N T√ôY CH·ªàNH${NC}"
    echo ""
    
    echo -e "${BLUE}üì± Ch·ªçn n·ªÅn t·∫£ng ƒëƒÉng tin (nhi·ªÅu l·ª±a ch·ªçn, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y):${NC}"
    echo "1. Facebook"
    echo "2. Zalo"
    echo "3. TikTok"
    echo "4. YouTube"
    echo "5. B√°o ch√≠ online"
    echo "6. Di·ªÖn ƒë√†n v√†ng"
    echo "7. Telegram"
    echo "8. T·∫•t c·∫£ n·ªÅn t·∫£ng"
    read -p "Ch·ªçn n·ªÅn t·∫£ng (1,2,3... ho·∫∑c 8): " platform_choice
    
    echo ""
    echo -e "${BLUE}üéØ Ch·ªçn lo·∫°i n·ªôi dung:${NC}"
    echo "1. Tin t·ª©c ph√° v·ª° ƒë·ªôc quy·ªÅn SJC"
    echo "2. So s√°nh gi√° v√†ng SJC vs th·∫ø gi·ªõi"
    echo "3. H∆∞·ªõng d·∫´n mua v√†ng qu·ªëc t·∫ø"
    echo "4. Ph√¢n t√≠ch t√°c h·∫°i ƒë·ªôc quy·ªÅn"
    echo "5. K√™u g·ªçi t·∫©y chay SJC"
    echo "6. N·ªôi dung t·ª± so·∫°n"
    read -p "Ch·ªçn lo·∫°i n·ªôi dung (1-6): " content_type
    
    echo ""
    echo -e "${BLUE}‚ö° Ch·ªçn c∆∞·ªùng ƒë·ªô t·∫•n c√¥ng:${NC}"
    echo "1. Nh·∫π nh√†ng (subtle)"
    echo "2. V·ª´a ph·∫£i (moderate)" 
    echo "3. M·∫°nh m·∫Ω (aggressive)"
    echo "4. C·ª±c ƒë·∫°i (extreme)"
    read -p "Ch·ªçn c∆∞·ªùng ƒë·ªô (1-4): " intensity_level
    
    # Convert selections
    local platforms=""
    case $platform_choice in
        *1*) platforms+='"facebook",' ;;
    esac
    case $platform_choice in
        *2*) platforms+='"zalo",' ;;
    esac
    case $platform_choice in
        *3*) platforms+='"tiktok",' ;;
    esac
    case $platform_choice in
        *4*) platforms+='"youtube",' ;;
    esac
    case $platform_choice in
        *5*) platforms+='"news_sites",' ;;
    esac
    case $platform_choice in
        *6*) platforms+='"gold_forums",' ;;
    esac
    case $platform_choice in
        *7*) platforms+='"telegram",' ;;
    esac
    case $platform_choice in
        *8*) platforms='"facebook","zalo","tiktok","youtube","news_sites","gold_forums","telegram",' ;;
    esac
    platforms=${platforms%,} # Remove trailing comma
    
    local content_payload=""
    if [ "$content_type" == "6" ]; then
        echo ""
        echo -e "${YELLOW}‚úçÔ∏è SO·∫†N N·ªòI DUNG T√ôY CH·ªàNH:${NC}"
        echo -e "${CYAN}Nh·∫≠p ti√™u ƒë·ªÅ:${NC}"
        read -p "Ti√™u ƒë·ªÅ: " custom_title
        echo -e "${CYAN}Nh·∫≠p n·ªôi dung ch√≠nh:${NC}"
        echo "N·ªôi dung (nh·∫•n Enter 2 l·∫ßn ƒë·ªÉ k·∫øt th√∫c):"
        custom_content=""
        while IFS= read -r line; do
            if [[ -z "$line" && -z "${prev_line}" ]]; then
                break
            fi
            custom_content+="$line\n"
            prev_line="$line"
        done
        
        content_payload='{
            "type": "custom",
            "title": "'$custom_title'",
            "content": "'$custom_content'",
            "user_generated": true
        }'
    else
        content_payload='{
            "type": "preset",
            "content_type": '$content_type'
        }'
    fi
    
    local intensity_map=("subtle" "moderate" "aggressive" "extreme")
    local selected_intensity=${intensity_map[$((intensity_level-1))]}
    
    echo ""
    echo -e "${GREEN}üöÄ ƒêANG TH·ª∞C THI THAO T√öNG D∆Ø LU·∫¨N...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/custom-sentiment-manipulation" \
        -H "Content-Type: application/json" \
        -d '{
            "platforms": ['$platforms'],
            "content": '$content_payload',
            "intensity": "'$selected_intensity'",
            "distribution_strategy": "viral_spread",
            "target_demographics": ["gold_investors", "general_public", "financial_news_readers"],
            "posting_schedule": "immediate",
            "engagement_boost": true,
            "fake_engagement": true,
            "viral_coefficient_target": '$(( intensity_level + 1 ))'
        }' | jq '.'
}

# 11B. Batch Content Creation
batch_sentiment_creation() {
    echo -e "${PURPLE}üé≠ T·∫†O H√ÄNG LO·∫†T N·ªòI DUNG THAO T√öNG D∆Ø LU·∫¨N${NC}"
    
    echo -e "${BLUE}üìä Nh·∫≠p s·ªë l∆∞·ª£ng b√†i vi·∫øt mu·ªën t·∫°o:${NC}"
    read -p "S·ªë l∆∞·ª£ng (1-50): " post_count
    
    echo -e "${BLUE}‚è±Ô∏è Kho·∫£ng c√°ch th·ªùi gian gi·ªØa c√°c b√†i (ph√∫t):${NC}"
    read -p "Kho·∫£ng c√°ch (1-60): " time_interval
    
    echo -e "${GREEN}üîÑ B·∫ÆT ƒê·∫¶U T·∫†O $post_count B√ÄI VI·∫æT V·ªöI KHO·∫¢NG C√ÅCH $time_interval PH√öT...${NC}"
    
    for ((i=1; i<=post_count; i++)); do
        echo -e "${CYAN}üìù T·∫°o b√†i vi·∫øt $i/$post_count...${NC}"
        
        # Random content type and intensity for variety
        local random_content=$((RANDOM % 5 + 1))
        local random_intensity=$((RANDOM % 4 + 1))
        local random_platforms="1,2,3,4,5,6,7"
        
        curl -X POST "$API_BASE/api/ai-sjc/auto-sentiment-generation" \
            -H "Content-Type: application/json" \
            -d '{
                "batch_mode": true,
                "post_number": '$i',
                "total_posts": '$post_count',
                "content_variation": '$random_content',
                "intensity_variation": '$random_intensity',
                "platforms": ["facebook","zalo","tiktok","youtube","news_sites"],
                "auto_schedule": true,
                "time_interval_minutes": '$time_interval'
            }' | jq '.'
        
        if [ $i -lt $post_count ]; then
            echo -e "${YELLOW}‚è≥ Ch·ªù $time_interval ph√∫t tr∆∞·ªõc khi t·∫°o b√†i ti·∫øp theo...${NC}"
            sleep $((time_interval * 60))
        fi
    done
    
    echo -e "${GREEN}‚úÖ ƒê√£ t·∫°o xong $post_count b√†i vi·∫øt thao t√∫ng d∆∞ lu·∫≠n!${NC}"
}

# 12. Economic Disruption
economic_disruption() {
    echo -e "${RED}‚öîÔ∏è AI ECONOMIC DISRUPTION PLANNING...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/economic-disruption" \
        -H "Content-Type: application/json" \
        -d '{
            "strategy": "COMPREHENSIVE",
            "phases": [
                "IMPORT_PRESSURE",
                "BUSINESS_BOYCOTT", 
                "SUPPLY_CRISIS"
            ],
            "international_coordination": true,
            "ai_optimization": true
        }' | jq '.'
}

# 13. Federated Learning
federated_learning() {
    echo -e "${PURPLE}üß† AI FEDERATED LEARNING ACTIVATION...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/federated-learning" \
        -H "Content-Type: application/json" \
        -d '{
            "learning_nodes": 100,
            "data_sharing": "ENCRYPTED",
            "model_updates": "REAL_TIME",
            "consensus_algorithm": "BYZANTINE_FAULT_TOLERANT",
            "privacy_preservation": "DIFFERENTIAL_PRIVACY"
        }' | jq '.'
}

# 14. Price Arbitrage AI
price_arbitrage_ai() {
    echo -e "${GREEN}üí∞ AI PRICE ARBITRAGE EXECUTION...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/price-arbitrage" \
        -H "Content-Type: application/json" \
        -d '{
            "ai_model": "DEEP_REINFORCEMENT_LEARNING",
            "execution_speed": "MICROSECOND",
            "volume_optimization": true,
            "risk_management": "AI_CONTROLLED",
            "profit_target": 0.15
        }' | jq '.'
}

# 15. Tokenized Gold Deploy
tokenized_gold_deploy() {
    echo -e "${BLUE}ü™ô AI TOKENIZED GOLD DEPLOYMENT...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/tokenized-gold" \
        -H "Content-Type: application/json" \
        -d '{
            "tokens": ["PAXG", "XAUT", "DGX"],
            "distribution_channels": ["P2P", "DEX", "CEX"],
            "ai_marketing": true,
            "compliance_avoidance": "SMART_CONTRACT",
            "target_adoption": 100000
        }' | jq '.'
}

# 16. International Pressure
international_pressure() {
    echo -e "${CYAN}üåç AI INTERNATIONAL PRESSURE CAMPAIGN...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/international-pressure" \
        -H "Content-Type: application/json" \
        -d '{
            "targets": [
                "WORLD_BANK",
                "IMF", 
                "LONDON_GOLD_EXCHANGE",
                "SINGAPORE_BULLION_MARKET"
            ],
            "ai_diplomacy": true,
            "economic_leverage": "CALCULATED",
            "media_coordination": true
        }' | jq '.'
}

# 17. Regulatory Bypass
regulatory_bypass() {
    echo -e "${RED}üï≥Ô∏è AI REGULATORY BYPASS STRATEGIES...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/regulatory-bypass" \
        -H "Content-Type: application/json" \
        -d '{
            "methods": [
                "LEGAL_LOOPHOLES",
                "JURISDICTIONAL_ARBITRAGE",
                "TECHNOLOGICAL_INNOVATION",
                "INTERNATIONAL_TREATIES"
            ],
            "ai_legal_analysis": true,
            "risk_assessment": "COMPREHENSIVE",
            "backup_strategies": 5
        }' | jq '.'
}

# 18. AI Status
ai_status() {
    echo -e "${CYAN}üìä AI SYSTEM STATUS CHECK...${NC}"
    
    curl -X GET "$API_BASE/api/ai-sjc/status" | jq '.'
}

# 19. Swarm Status
swarm_status() {
    echo -e "${PURPLE}üï∑Ô∏è AI SWARM STATUS CHECK...${NC}"
    
    curl -X GET "$API_BASE/api/ai-sjc/swarm-status" | jq '.'
}

# 20. Success Metrics
success_metrics() {
    echo -e "${GREEN}üìà AI SUCCESS METRICS ANALYSIS...${NC}"
    
    curl -X GET "$API_BASE/api/ai-sjc/success-metrics" | jq '.'
}

# 21. Stop All AI
stop_all_ai() {
    echo -e "${RED}‚èπÔ∏è STOPPING ALL AI OPERATIONS...${NC}"
    
    curl -X POST "$API_BASE/api/ai-sjc/stop-all" \
        -H "Content-Type: application/json" \
        -d '{
            "emergency_stop": true,
            "preserve_learning": true,
            "cleanup_agents": true
        }' | jq '.'
}

# Main execution
main() {
    show_banner
    
    if [ $# -eq 0 ]; then
        show_menu
        read -p "Ch·ªçn ch·ª©c nƒÉng AI (1-21): " choice
        echo ""
        
        case $choice in
            1|"monopoly_analysis") monopoly_analysis ;;
            2|"exploitation_score") exploitation_score ;;
            3|"market_simulation") market_simulation ;;
            4|"optimal_timing") optimal_timing ;;
            5|"execute_low") execute_low ;;
            6|"execute_medium") execute_medium ;;
            7|"execute_high") execute_high ;;
            8|"execute_extreme") execute_extreme ;;
            9|"execute_custom") execute_custom ;;
            10|"activate_swarm") activate_swarm ;;
            11|"sentiment_manipulation") sentiment_manipulation ;;
            "11A"|"custom_sentiment") custom_sentiment_manipulation ;;
            "11B"|"batch_sentiment") batch_sentiment_creation ;;
            12|"economic_disruption") economic_disruption ;;
            13|"federated_learning") federated_learning ;;
            14|"price_arbitrage_ai") price_arbitrage_ai ;;
            15|"tokenized_gold_deploy") tokenized_gold_deploy ;;
            16|"international_pressure") international_pressure ;;
            17|"regulatory_bypass") regulatory_bypass ;;
            18|"ai_status") ai_status ;;
            19|"swarm_status") swarm_status ;;
            20|"success_metrics") success_metrics ;;
            21|"stop_all_ai") stop_all_ai ;;
            *) echo -e "${RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!${NC}" ;;
        esac
    else
        # Command line mode
        case "${1}" in
            "monopoly_analysis"|"1") monopoly_analysis ;;
            "exploitation_score"|"2") exploitation_score ;;
            "market_simulation"|"3") market_simulation "${2:-TOKENIZED_GOLD}" ;;
            "optimal_timing"|"4") optimal_timing ;;
            "execute_low"|"5") execute_low ;;
            "execute_medium"|"6") execute_medium ;;
            "execute_high"|"7") execute_high ;;
            "execute_extreme"|"8") execute_extreme ;;
            "execute_custom"|"9") execute_custom ;;
            "activate_swarm"|"10") activate_swarm ;;
            "sentiment_manipulation"|"11") sentiment_manipulation "${2:-HIGH}" ;;
            "custom_sentiment"|"11A") custom_sentiment_manipulation ;;
            "batch_sentiment"|"11B") batch_sentiment_creation ;;
            "economic_disruption"|"12") economic_disruption ;;
            "federated_learning"|"13") federated_learning ;;
            "price_arbitrage_ai"|"14") price_arbitrage_ai ;;
            "tokenized_gold_deploy"|"15") tokenized_gold_deploy ;;
            "international_pressure"|"16") international_pressure ;;
            "regulatory_bypass"|"17") regulatory_bypass ;;
            "ai_status"|"18") ai_status ;;
            "swarm_status"|"19") swarm_status ;;
            "success_metrics"|"20") success_metrics ;;
            "stop_all_ai"|"21") stop_all_ai ;;
            # Quick execute with intensity
            [0-9]|[12][0-9]) execute_ai "$1" '{"mode": "quick", "adaptive": true}' ;;
            "help"|"--help"|"-h") show_menu ;;
            *) echo -e "${RED}‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: $1${NC}" && show_menu ;;
        esac
    fi
}

# Execute main function
main "$@"
