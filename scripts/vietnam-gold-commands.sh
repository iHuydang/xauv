#!/bin/bash

# Vietnam Gold Liquidity Scanner Commands
# C√°c l·ªánh qu√©t thanh kho·∫£n v√†ng Vi·ªát Nam v·ªõi thu·∫≠t to√°n √°p l·ª±c USD/VND

set -e

# Configuration
API_BASE="http://localhost:5000"
PYTHON_SCANNER="./scripts/vietnam-gold-pressure-scanner.py"
LOG_DIR="./logs"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Create logs directory if not exists
mkdir -p "$LOG_DIR"

# Helper functions
log_command() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_DIR/vietnam_gold_commands_${TIMESTAMP}.log"
}

print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë               VIETNAM GOLD LIQUIDITY SCANNER               ‚ïë${NC}"
    echo -e "${BLUE}‚ïë           Qu√©t Thanh Kho·∫£n V√†ng Vi·ªát Nam v·ªõi USD/VND      ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Command 1: Qu√©t √°p l·ª±c v√†ng to√†n di·ªán
scan_full_pressure() {
    echo -e "${GREEN}üöÄ L·ªÜNH 1: QU√âT √ÅP L·ª∞C V√ÄNG TO√ÄN DI·ªÜN${NC}"
    log_command "Executing full pressure scan"
    
    echo -e "${YELLOW}ƒêang kh·ªüi ch·∫°y thu·∫≠t to√°n √°p l·ª±c USD/VND...${NC}"
    python3 "$PYTHON_SCANNER" full
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh qu√©t √°p l·ª±c to√†n di·ªán${NC}"
}

# Command 2: Qu√©t nhanh ch·ªâ t·ª∑ gi√°
scan_quick_exchange() {
    echo -e "${GREEN}üöÄ L·ªÜNH 2: QU√âT NHANH T·ª∂ GI√Å USD/VND${NC}"
    log_command "Executing quick exchange rate scan"
    
    echo -e "${YELLOW}ƒêang l·∫•y t·ª∑ gi√° USD/VND th·ªùi gian th·ª±c...${NC}"
    python3 "$PYTHON_SCANNER" quick
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh qu√©t nhanh t·ª∑ gi√°${NC}"
}

# Command 3: T·∫•n c√¥ng √°p l·ª±c SJC cao
attack_sjc_high() {
    local duration=${1:-300}
    echo -e "${RED}üöÄ L·ªÜNH 3: T·∫§N C√îNG √ÅP L·ª∞C SJC CAO${NC}"
    log_command "Executing SJC high pressure attack for ${duration}s"
    
    echo -e "${YELLOW}ƒêang kh·ªüi ch·∫°y t·∫•n c√¥ng √°p l·ª±c SJC c∆∞·ªùng ƒë·ªô cao...${NC}"
    curl -X POST "$API_BASE/api/vietnam-gold/pressure-attack" \
        -H "Content-Type: application/json" \
        -d '{
            "targets": ["SJC", "DOJI"],
            "intensity": "high",
            "duration": '${duration}',
            "stealth_mode": true
        }' | jq '.' || echo "API kh√¥ng ph·∫£n h·ªìi"
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh t·∫•n c√¥ng √°p l·ª±c SJC${NC}"
}

# Command 4: Qu√©t vulnerability t·∫•t c·∫£ ngu·ªìn
scan_vulnerabilities() {
    echo -e "${GREEN}üöÄ L·ªÜNH 4: QU√âT VULNERABILITY T·∫§T C·∫¢ NGU·ªíN${NC}"
    log_command "Scanning vulnerabilities across all sources"
    
    echo -e "${YELLOW}ƒêang ph√¢n t√≠ch ƒëi·ªÉm y·∫øu c√°c ngu·ªìn gi√° v√†ng...${NC}"
    curl -X GET "$API_BASE/api/vietnam-gold/vulnerability-analysis" | jq '.' || echo "API kh√¥ng ph·∫£n h·ªìi"
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh qu√©t vulnerability${NC}"
}

# Command 5: Theo d√µi gi√° v√†ng real-time
monitor_realtime() {
    local interval=${1:-30}
    echo -e "${GREEN}üöÄ L·ªÜNH 5: THEO D√ïI GI√Å V√ÄNG REAL-TIME${NC}"
    log_command "Starting real-time monitoring with ${interval}s interval"
    
    echo -e "${YELLOW}ƒêang theo d√µi gi√° v√†ng m·ªói ${interval} gi√¢y (Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng)...${NC}"
    
    while true; do
        echo -e "${PURPLE}$(date '+%H:%M:%S') - ƒêang c·∫≠p nh·∫≠t gi√°...${NC}"
        curl -s "$API_BASE/api/vietnam-gold/prices" | jq '.data.prices[] | {source: .source, buy: .buy, sell: .sell, spread: .spread}' || echo "L·ªói l·∫•y d·ªØ li·ªáu"
        echo "---"
        sleep "$interval"
    done
}

# Command 6: Ph√¢n t√≠ch arbitrage c∆° h·ªôi
analyze_arbitrage() {
    echo -e "${GREEN}üöÄ L·ªÜNH 6: PH√ÇN T√çCH C∆† H·ªòI ARBITRAGE${NC}"
    log_command "Analyzing arbitrage opportunities"
    
    echo -e "${YELLOW}ƒêang t√≠nh to√°n c∆° h·ªôi arbitrage gi·ªØa c√°c ngu·ªìn...${NC}"
    
    # Get Vietnam prices
    vn_prices=$(curl -s "$API_BASE/api/vietnam-gold/prices" | jq '.data.prices // []')
    
    # Calculate arbitrage opportunities
    echo "$vn_prices" | jq '
    map(select(.buy and .sell)) |
    sort_by(.buy) |
    {
        lowest_buy: .[0],
        highest_sell: .[-1],
        arbitrage_opportunity: ((.[-1].sell - .[0].buy) / .[0].buy * 100)
    }' || echo "Kh√¥ng th·ªÉ t√≠nh arbitrage"
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh ph√¢n t√≠ch arbitrage${NC}"
}

# Command 7: Test k·∫øt n·ªëi t·∫•t c·∫£ API
test_connections() {
    echo -e "${GREEN}üöÄ L·ªÜNH 7: TEST K·∫æT N·ªêI T·∫§T C·∫¢ API${NC}"
    log_command "Testing all API connections"
    
    echo -e "${YELLOW}ƒêang ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c API...${NC}"
    
    # Test local API
    echo -e "üîó Local Vietnam Gold API:"
    curl -s "$API_BASE/api/vietnam-gold/prices" > /dev/null && echo "‚úÖ OK" || echo "‚ùå Failed"
    
    # Test USD/VND rate
    echo -e "üîó USD/VND Exchange Rate API:"
    curl -s "https://markets.newyorkfed.org/api/fxs/all/latest.json" > /dev/null && echo "‚úÖ OK" || echo "‚ùå Failed"
    
    # Test world gold price
    echo -e "üîó World Gold Price API:"
    curl -s "https://goldprice.org/api/json/goldapi-a1omwe19mc2bnqkx-io" > /dev/null && echo "‚úÖ OK" || echo "‚ùå Failed"
    
    echo -e "${CYAN}‚úÖ Ho√†n th√†nh test k·∫øt n·ªëi${NC}"
}

# Command 8: B√°o c√°o t·ªïng h·ª£p h√†ng ng√†y
generate_daily_report() {
    echo -e "${GREEN}üöÄ L·ªÜNH 8: T·∫†O B√ÅO C√ÅO T·ªîNG H·ª¢P H√ÄNG NG√ÄY${NC}"
    log_command "Generating daily comprehensive report"
    
    local report_file="$LOG_DIR/daily_report_${TIMESTAMP}.json"
    
    echo -e "${YELLOW}ƒêang t·∫°o b√°o c√°o t·ªïng h·ª£p...${NC}"
    
    # Run comprehensive scan and save results
    python3 "$PYTHON_SCANNER" full > "$report_file.tmp"
    
    # Add system status
    echo "{" > "$report_file"
    echo "  \"report_timestamp\": \"$(date -Iseconds)\"," >> "$report_file"
    echo "  \"system_status\": {" >> "$report_file"
    echo "    \"api_status\": \"$(curl -s "$API_BASE/api/vietnam-gold/prices" > /dev/null && echo 'online' || echo 'offline')\"," >> "$report_file"
    echo "    \"scan_duration\": \"$(date '+%s')\"" >> "$report_file"
    echo "  }," >> "$report_file"
    echo "  \"scan_results\": " >> "$report_file"
    
    # Add scan results (if available)
    if [ -f "$report_file.tmp" ]; then
        cat "$report_file.tmp" >> "$report_file" || echo "null" >> "$report_file"
        rm "$report_file.tmp"
    else
        echo "null" >> "$report_file"
    fi
    
    echo "}" >> "$report_file"
    
    echo -e "${CYAN}‚úÖ B√°o c√°o ƒë√£ l∆∞u t·∫°i: $report_file${NC}"
}

# Main menu
show_menu() {
    print_header
    echo -e "${YELLOW}Ch·ªçn l·ªánh ƒë·ªÉ th·ª±c hi·ªán:${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} Qu√©t √°p l·ª±c v√†ng to√†n di·ªán (Full pressure scan)"
    echo -e "${GREEN}2.${NC} Qu√©t nhanh t·ª∑ gi√° USD/VND (Quick exchange scan)"
    echo -e "${RED}3.${NC} T·∫•n c√¥ng √°p l·ª±c SJC cao (SJC high pressure attack)"
    echo -e "${GREEN}4.${NC} Qu√©t vulnerability t·∫•t c·∫£ ngu·ªìn (Vulnerability scan)"
    echo -e "${BLUE}5.${NC} Theo d√µi real-time (Real-time monitoring)"
    echo -e "${PURPLE}6.${NC} Ph√¢n t√≠ch arbitrage (Arbitrage analysis)"
    echo -e "${CYAN}7.${NC} Test k·∫øt n·ªëi API (API connection test)"
    echo -e "${YELLOW}8.${NC} B√°o c√°o t·ªïng h·ª£p (Daily report)"
    echo -e "${NC}9.${NC} Tho√°t (Exit)"
    echo ""
}

# Command line interface
if [ $# -eq 0 ]; then
    # Interactive mode
    while true; do
        show_menu
        read -p "Nh·∫≠p l·ª±a ch·ªçn (1-9): " choice
        echo ""
        
        case $choice in
            1) scan_full_pressure ;;
            2) scan_quick_exchange ;;
            3) 
                read -p "Nh·∫≠p th·ªùi gian t·∫•n c√¥ng (gi√¢y, m·∫∑c ƒë·ªãnh 300): " duration
                attack_sjc_high "${duration:-300}"
                ;;
            4) scan_vulnerabilities ;;
            5) 
                read -p "Nh·∫≠p kho·∫£ng th·ªùi gian theo d√µi (gi√¢y, m·∫∑c ƒë·ªãnh 30): " interval
                monitor_realtime "${interval:-30}"
                ;;
            6) analyze_arbitrage ;;
            7) test_connections ;;
            8) generate_daily_report ;;
            9) echo "Tho√°t ch∆∞∆°ng tr√¨nh."; exit 0 ;;
            *) echo -e "${RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!${NC}" ;;
        esac
        
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
        clear
    done
else
    # Command line mode
    case $1 in
        "scan-full") scan_full_pressure ;;
        "scan-quick") scan_quick_exchange ;;
        "attack-sjc") attack_sjc_high "${2:-300}" ;;
        "scan-vuln") scan_vulnerabilities ;;
        "monitor") monitor_realtime "${2:-30}" ;;
        "arbitrage") analyze_arbitrage ;;
        "test") test_connections ;;
        "report") generate_daily_report ;;
        *)
            echo "S·ª≠ d·ª•ng: $0 [command] [options]"
            echo "Commands:"
            echo "  scan-full     - Qu√©t √°p l·ª±c to√†n di·ªán"
            echo "  scan-quick    - Qu√©t nhanh t·ª∑ gi√°"
            echo "  attack-sjc    - T·∫•n c√¥ng √°p l·ª±c SJC [duration]"
            echo "  scan-vuln     - Qu√©t vulnerability"
            echo "  monitor       - Theo d√µi real-time [interval]"
            echo "  arbitrage     - Ph√¢n t√≠ch arbitrage"
            echo "  test          - Test k·∫øt n·ªëi API"
            echo "  report        - T·∫°o b√°o c√°o t·ªïng h·ª£p"
            ;;
    esac
fi